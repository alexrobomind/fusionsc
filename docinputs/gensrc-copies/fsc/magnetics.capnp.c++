// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: magnetics.capnp

#include "magnetics.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<138> b_c3d9985615db9b44 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68, 155, 219,  21,  86, 152, 217, 195,
     16,   0,   0,   0,   1,   0,   8,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     84, 111, 114, 111, 105, 100,  97, 108,
     71, 114, 105, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     32,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    212,   0,   0,   0,   3,   0,   1,   0,
    224,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    216,   0,   0,   0,   3,   0,   1,   0,
    228,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   8,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    225,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    220,   0,   0,   0,   3,   0,   1,   0,
    232,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    224,   0,   0,   0,   3,   0,   1,   0,
    236,   0,   0,   0,   2,   0,   1,   0,
      6,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    228,   0,   0,   0,   3,   0,   1,   0,
    240,   0,   0,   0,   2,   0,   1,   0,
      7,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
    244,   0,   0,   0,   2,   0,   1,   0,
    114,  77, 105, 110,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  77,  97, 120,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,  77, 105, 110,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,  77,  97, 120,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  83, 121, 109,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  82,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  90,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  80, 104, 105,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c3d9985615db9b44 = b_c3d9985615db9b44.words;
#if !CAPNP_LITE
static const uint16_t m_c3d9985615db9b44[] = {7, 5, 4, 6, 1, 0, 3, 2};
static const uint16_t i_c3d9985615db9b44[] = {0, 1, 2, 3, 4, 5, 6, 7};
const ::capnp::_::RawSchema s_c3d9985615db9b44 = {
  0xc3d9985615db9b44, b_c3d9985615db9b44.words, 138, nullptr, m_c3d9985615db9b44,
  0, 8, i_c3d9985615db9b44, nullptr, nullptr, { &s_c3d9985615db9b44, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<60> b_d6f7d37e5338d8f1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    241, 216,  56,  83, 126, 211, 247, 214,
     16,   0,   0,   0,   1,   0,   0,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     67, 111, 109, 112, 117, 116, 101, 100,
     70, 105, 101, 108, 100,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
    103, 114, 105, 100,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     68, 155, 219,  21,  86, 152, 217, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     33, 119, 255, 124, 208, 144,  98, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6f7d37e5338d8f1 = b_d6f7d37e5338d8f1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d6f7d37e5338d8f1[] = {
  &s_c3d9985615db9b44,
  &s_c85b8a7758032008,
};
static const uint16_t m_d6f7d37e5338d8f1[] = {1, 0};
static const uint16_t i_d6f7d37e5338d8f1[] = {0, 1};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_d6f7d37e5338d8f1[] = {
  { 16777217,  ::fsc::DataRef< ::fsc::Float64Tensor>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_d6f7d37e5338d8f1 = {
  0xd6f7d37e5338d8f1, b_d6f7d37e5338d8f1.words, 60, d_d6f7d37e5338d8f1, m_d6f7d37e5338d8f1,
  2, 2, i_d6f7d37e5338d8f1, nullptr, nullptr, { &s_d6f7d37e5338d8f1, nullptr, bd_d6f7d37e5338d8f1, 0, sizeof(bd_d6f7d37e5338d8f1) / sizeof(bd_d6f7d37e5338d8f1[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_d5818633d1cde9fc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    252, 233, 205, 209,  51, 134, 129, 213,
     16,   0,   0,   0,   3,   0,   0,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  82, 101, 115,
    111, 108, 118, 101, 114,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 205,  31, 217, 125, 130,  23, 241,
    239, 199, 124,  22,  24, 155, 237, 162,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 115, 111, 108, 118, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d5818633d1cde9fc = b_d5818633d1cde9fc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d5818633d1cde9fc[] = {
  &s_a2ed9b18167cc7ef,
  &s_f117827dd91fcd74,
};
static const uint16_t m_d5818633d1cde9fc[] = {0};
const ::capnp::_::RawSchema s_d5818633d1cde9fc = {
  0xd5818633d1cde9fc, b_d5818633d1cde9fc.words, 29, d_d5818633d1cde9fc, m_d5818633d1cde9fc,
  2, 1, nullptr, nullptr, nullptr, { &s_d5818633d1cde9fc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_f117827dd91fcd74 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116, 205,  31, 217, 125, 130,  23, 241,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  82, 101, 115,
    111, 108, 118, 101, 114,  46, 114, 101,
    115, 111, 108, 118, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    102, 105, 101, 108, 100,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 111, 108, 108, 111, 119,  82, 101,
    102, 115,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f117827dd91fcd74 = b_f117827dd91fcd74.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f117827dd91fcd74[] = {
  &s_870b474a2c5ac2da,
};
static const uint16_t m_f117827dd91fcd74[] = {0, 1};
static const uint16_t i_f117827dd91fcd74[] = {0, 1};
const ::capnp::_::RawSchema s_f117827dd91fcd74 = {
  0xf117827dd91fcd74, b_f117827dd91fcd74.words, 50, d_f117827dd91fcd74, m_f117827dd91fcd74,
  1, 2, i_f117827dd91fcd74, nullptr, nullptr, { &s_f117827dd91fcd74, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a2ed9b18167cc7ef = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    239, 199, 124,  22,  24, 155, 237, 162,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  82, 101, 115,
    111, 108, 118, 101, 114,  46, 114, 101,
    115, 111, 108, 118, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 105, 101, 108, 100,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a2ed9b18167cc7ef = b_a2ed9b18167cc7ef.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a2ed9b18167cc7ef[] = {
  &s_870b474a2c5ac2da,
};
static const uint16_t m_a2ed9b18167cc7ef[] = {0};
static const uint16_t i_a2ed9b18167cc7ef[] = {0};
const ::capnp::_::RawSchema s_a2ed9b18167cc7ef = {
  0xa2ed9b18167cc7ef, b_a2ed9b18167cc7ef.words, 34, d_a2ed9b18167cc7ef, m_a2ed9b18167cc7ef,
  1, 1, i_a2ed9b18167cc7ef, nullptr, nullptr, { &s_a2ed9b18167cc7ef, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_e1c57425184be19a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154, 225,  75,  24,  37, 116, 197, 225,
     16,   0,   0,   0,   3,   0,   0,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  67,  97, 108,
     99, 117, 108,  97, 116, 111, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192, 114,  67,  74, 130, 197,  40, 195,
    177, 211, 197,  47, 198,  84, 106, 216,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e1c57425184be19a = b_e1c57425184be19a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e1c57425184be19a[] = {
  &s_c328c5824a4372c0,
  &s_d86a54c62fc5d3b1,
};
static const uint16_t m_e1c57425184be19a[] = {0};
const ::capnp::_::RawSchema s_e1c57425184be19a = {
  0xe1c57425184be19a, b_e1c57425184be19a.words, 29, d_e1c57425184be19a, m_e1c57425184be19a,
  2, 1, nullptr, nullptr, nullptr, { &s_e1c57425184be19a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_c328c5824a4372c0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    192, 114,  67,  74, 130, 197,  40, 195,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  67,  97, 108,
     99, 117, 108,  97, 116, 111, 114,  46,
    103, 101, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    103, 114, 105, 100,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     68, 155, 219,  21,  86, 152, 217, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c328c5824a4372c0 = b_c328c5824a4372c0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c328c5824a4372c0[] = {
  &s_c3d9985615db9b44,
};
static const uint16_t m_c328c5824a4372c0[] = {0};
static const uint16_t i_c328c5824a4372c0[] = {0};
const ::capnp::_::RawSchema s_c328c5824a4372c0 = {
  0xc328c5824a4372c0, b_c328c5824a4372c0.words, 34, d_c328c5824a4372c0, m_c328c5824a4372c0,
  1, 1, i_c328c5824a4372c0, nullptr, nullptr, { &s_c328c5824a4372c0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d86a54c62fc5d3b1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 211, 197,  47, 198,  84, 106, 216,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  67,  97, 108,
     99, 117, 108,  97, 116, 111, 114,  46,
    103, 101, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 115, 115, 105, 111, 110,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      2,   1, 152, 137, 114,  84, 189, 171,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d86a54c62fc5d3b1 = b_d86a54c62fc5d3b1.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d86a54c62fc5d3b1[] = {
  &s_abbd547289980102,
};
static const uint16_t m_d86a54c62fc5d3b1[] = {0};
static const uint16_t i_d86a54c62fc5d3b1[] = {0};
const ::capnp::_::RawSchema s_d86a54c62fc5d3b1 = {
  0xd86a54c62fc5d3b1, b_d86a54c62fc5d3b1.words, 34, d_d86a54c62fc5d3b1, m_d86a54c62fc5d3b1,
  1, 1, i_d86a54c62fc5d3b1, nullptr, nullptr, { &s_d86a54c62fc5d3b1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_abbd547289980102 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      2,   1, 152, 137, 114,  84, 189, 171,
     16,   0,   0,   0,   3,   0,   0,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  67,  97, 108,
     99, 117, 108,  97, 116, 105, 111, 110,
     83, 101, 115, 115, 105, 111, 110,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    139, 229, 156, 180, 222, 251, 157, 130,
    171, 101, 142,  96, 156, 252, 201, 227,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99, 111, 109, 112, 117, 116, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_abbd547289980102 = b_abbd547289980102.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_abbd547289980102[] = {
  &s_829dfbdeb49ce58b,
  &s_e3c9fc9c608e65ab,
};
static const uint16_t m_abbd547289980102[] = {0};
const ::capnp::_::RawSchema s_abbd547289980102 = {
  0xabbd547289980102, b_abbd547289980102.words, 30, d_abbd547289980102, m_abbd547289980102,
  2, 1, nullptr, nullptr, nullptr, { &s_abbd547289980102, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_829dfbdeb49ce58b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    139, 229, 156, 180, 222, 251, 157, 130,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  67,  97, 108,
     99, 117, 108,  97, 116, 105, 111, 110,
     83, 101, 115, 115, 105, 111, 110,  46,
     99, 111, 109, 112, 117, 116, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 105, 101, 108, 100,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_829dfbdeb49ce58b = b_829dfbdeb49ce58b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_829dfbdeb49ce58b[] = {
  &s_870b474a2c5ac2da,
};
static const uint16_t m_829dfbdeb49ce58b[] = {0};
static const uint16_t i_829dfbdeb49ce58b[] = {0};
const ::capnp::_::RawSchema s_829dfbdeb49ce58b = {
  0x829dfbdeb49ce58b, b_829dfbdeb49ce58b.words, 35, d_829dfbdeb49ce58b, m_829dfbdeb49ce58b,
  1, 1, i_829dfbdeb49ce58b, nullptr, nullptr, { &s_829dfbdeb49ce58b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_e3c9fc9c608e65ab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171, 101, 142,  96, 156, 252, 201, 227,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 101, 108, 100,  67,  97, 108,
     99, 117, 108,  97, 116, 105, 111, 110,
     83, 101, 115, 115, 105, 111, 110,  46,
     99, 111, 109, 112, 117, 116, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 109, 112, 117, 116, 101, 100,
     70, 105, 101, 108, 100,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    241, 216,  56,  83, 126, 211, 247, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e3c9fc9c608e65ab = b_e3c9fc9c608e65ab.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e3c9fc9c608e65ab[] = {
  &s_d6f7d37e5338d8f1,
};
static const uint16_t m_e3c9fc9c608e65ab[] = {0};
static const uint16_t i_e3c9fc9c608e65ab[] = {0};
const ::capnp::_::RawSchema s_e3c9fc9c608e65ab = {
  0xe3c9fc9c608e65ab, b_e3c9fc9c608e65ab.words, 36, d_e3c9fc9c608e65ab, m_e3c9fc9c608e65ab,
  1, 1, i_e3c9fc9c608e65ab, nullptr, nullptr, { &s_e3c9fc9c608e65ab, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_a2805b1aedeb55ec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236,  85, 235, 237,  26,  91, 128, 162,
     16,   0,   0,   0,   1,   0,   2,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     66, 105, 111, 116,  83,  97, 118,  97,
    114, 116,  83, 101, 116, 116, 105, 110,
    103, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    119, 105, 100, 116, 104,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 101, 112,  83, 105, 122, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a2805b1aedeb55ec = b_a2805b1aedeb55ec.words;
#if !CAPNP_LITE
static const uint16_t m_a2805b1aedeb55ec[] = {1, 0};
static const uint16_t i_a2805b1aedeb55ec[] = {0, 1};
const ::capnp::_::RawSchema s_a2805b1aedeb55ec = {
  0xa2805b1aedeb55ec, b_a2805b1aedeb55ec.words, 50, nullptr, m_a2805b1aedeb55ec,
  0, 2, i_a2805b1aedeb55ec, nullptr, nullptr, { &s_a2805b1aedeb55ec, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<76> b_fb318024a81be411 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     17, 228,  27, 168,  36, 128,  49, 251,
     16,   0,   0,   0,   1,   0,   2,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      1,   0,   7,   0,   0,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     70, 105, 108,  97, 109, 101, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 108, 105, 110, 101,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     33, 119, 255, 124, 208, 144,  98, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 102,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     17, 228,  27, 168,  36, 128,  49, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  55, 120,  67, 111, 105, 108, 115,
     68,  66,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb318024a81be411 = b_fb318024a81be411.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fb318024a81be411[] = {
  &s_c85b8a7758032008,
  &s_eb6290d07cff7721,
};
static const uint16_t m_fb318024a81be411[] = {0, 1, 2};
static const uint16_t i_fb318024a81be411[] = {0, 1, 2};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_fb318024a81be411[] = {
  { 16777217,  ::fsc::DataRef< ::fsc::Filament>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_fb318024a81be411 = {
  0xfb318024a81be411, b_fb318024a81be411.words, 76, d_fb318024a81be411, m_fb318024a81be411,
  2, 3, i_fb318024a81be411, nullptr, nullptr, { &s_fb318024a81be411, nullptr, bd_fb318024a81be411, 0, sizeof(bd_fb318024a81be411) / sizeof(bd_fb318024a81be411[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<163> b_9aa7a9815343303c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60,  48,  67,  83, 129, 169, 167, 154,
     16,   0,   0,   0,   1,   0,   2,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      8,   0,   7,   0,   0,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 199,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     87,  55,  88,  67, 111, 105, 108,  83,
    101, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     32,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    209,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    220,   0,   0,   0,   3,   0,   1,   0,
    232,   0,   0,   0,   2,   0,   1,   0,
      6,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    235, 240, 228,  50, 218, 210, 247, 186,
    229,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    242, 159,  72, 232, 208,  66, 198, 137,
    209,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   5,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    229,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    228,   0,   0,   0,   3,   0,   1,   0,
      0,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   6,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   1,   0,   0,   3,   0,   1,   0,
     36,   1,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     53,   1,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   1,   0,   0,   3,   0,   1,   0,
     84,   1,   0,   0,   2,   0,   1,   0,
    105, 110, 118, 101, 114, 116,  77,  97,
    105, 110,  67, 111, 105, 108, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 105, 111, 116,  83,  97, 118,  97,
    114, 116,  83, 101, 116, 116, 105, 110,
    103, 115,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236,  85, 235, 237,  26,  91, 128, 162,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 105, 108, 115,  68,  66,  83,
    101, 116,   0,   0,   0,   0,   0,   0,
     99, 117, 115, 116, 111, 109,  67, 111,
    105, 108,  83, 101, 116,   0,   0,   0,
    110,  87, 105, 110, 100,  77,  97, 105,
    110,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  60,   0,   0,   0,
    108,   0,   0,   0, 108,   0,   0,   0,
    108,   0,   0,   0, 108,   0,   0,   0,
    108,   0,   0,   0,  36,   0,   0,   0,
     36,   0,   0,   0,   0,   0,   0,   0,
    110,  87, 105, 110, 100,  84, 114, 105,
    109,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  44,   0,   0,   0,
     48,   0,   0,   0,  72,   0,   0,   0,
     48,   0,   0,   0,  48,   0,   0,   0,
     48,   0,   0,   0,   0,   0,   0,   0,
    110,  87, 105, 110, 100,  67, 111, 110,
    116, 114, 111, 108,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  84,   0,   0,   0,
      8,   0,   0,   0,   8,   0,   0,   0,
      8,   0,   0,   0,   8,   0,   0,   0,
      8,   0,   0,   0,   8,   0,   0,   0,
      8,   0,   0,   0,   8,   0,   0,   0,
      8,   0,   0,   0,   8,   0,   0,   0,
    105, 110, 118, 101, 114, 116,  67, 111,
    110, 116, 114, 111, 108,  67, 111, 105,
    108, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  81,   0,   0,   0,
    170,   2,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9aa7a9815343303c = b_9aa7a9815343303c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9aa7a9815343303c[] = {
  &s_89c642d0e8489ff2,
  &s_a2805b1aedeb55ec,
  &s_baf7d2da32e4f0eb,
};
static const uint16_t m_9aa7a9815343303c[] = {1, 2, 3, 7, 0, 6, 4, 5};
static const uint16_t i_9aa7a9815343303c[] = {2, 3, 0, 1, 4, 5, 6, 7};
const ::capnp::_::RawSchema s_9aa7a9815343303c = {
  0x9aa7a9815343303c, b_9aa7a9815343303c.words, 163, d_9aa7a9815343303c, m_9aa7a9815343303c,
  3, 8, i_9aa7a9815343303c, nullptr, nullptr, { &s_9aa7a9815343303c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<74> b_baf7d2da32e4f0eb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    235, 240, 228,  50, 218, 210, 247, 186,
     27,   0,   0,   0,   1,   0,   2,   0,
     60,  48,  67,  83, 129, 169, 167, 154,
      8,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     87,  55,  88,  67, 111, 105, 108,  83,
    101, 116,  46,  99, 111, 105, 108, 115,
     68,  66,  83, 101, 116,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   0,   0,   0,   3,   0,   1,   0,
    128,   0,   0,   0,   2,   0,   1,   0,
    109,  97, 105, 110,  67, 111, 105, 108,
     79, 102, 102, 115, 101, 116,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0, 160,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114, 105, 109,  67, 111, 105, 108,
     73,  68, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  44,   0,   0,   0,
     94,   1,   0,   0, 241,   0,   0,   0,
     95,   1,   0,   0,  96,   1,   0,   0,
     97,   1,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  67,
    111, 105, 108,  79, 102, 102, 115, 101,
    116,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0, 230,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_baf7d2da32e4f0eb = b_baf7d2da32e4f0eb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_baf7d2da32e4f0eb[] = {
  &s_9aa7a9815343303c,
};
static const uint16_t m_baf7d2da32e4f0eb[] = {2, 0, 1};
static const uint16_t i_baf7d2da32e4f0eb[] = {0, 1, 2};
const ::capnp::_::RawSchema s_baf7d2da32e4f0eb = {
  0xbaf7d2da32e4f0eb, b_baf7d2da32e4f0eb.words, 74, d_baf7d2da32e4f0eb, m_baf7d2da32e4f0eb,
  1, 3, i_baf7d2da32e4f0eb, nullptr, nullptr, { &s_baf7d2da32e4f0eb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<115> b_89c642d0e8489ff2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    242, 159,  72, 232, 208,  66, 198, 137,
     27,   0,   0,   0,   1,   0,   2,   0,
     60,  48,  67,  83, 129, 169, 167, 154,
      8,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     87,  55,  88,  67, 111, 105, 108,  83,
    101, 116,  46,  99, 117, 115, 116, 111,
    109,  67, 111, 105, 108,  83, 101, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    212,   0,   0,   0,   3,   0,   1,   0,
     32,   1,   0,   0,   2,   0,   1,   0,
    109,  97, 105, 110,  67, 111, 105, 108,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     17, 228,  27, 168,  36, 128,  49, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114, 105, 109,  67, 111, 105, 108,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     17, 228,  27, 168,  36, 128,  49, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,  67,
    111, 105, 108, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     17, 228,  27, 168,  36, 128,  49, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_89c642d0e8489ff2 = b_89c642d0e8489ff2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_89c642d0e8489ff2[] = {
  &s_9aa7a9815343303c,
  &s_c85b8a7758032008,
};
static const uint16_t m_89c642d0e8489ff2[] = {2, 0, 1};
static const uint16_t i_89c642d0e8489ff2[] = {0, 1, 2};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_89c642d0e8489ff2[] = {
  { 16777216,  ::fsc::DataRef< ::fsc::Filament>::_capnpPrivate::brand() },
  { 16777217,  ::fsc::DataRef< ::fsc::Filament>::_capnpPrivate::brand() },
  { 16777218,  ::fsc::DataRef< ::fsc::Filament>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_89c642d0e8489ff2 = {
  0x89c642d0e8489ff2, b_89c642d0e8489ff2.words, 115, d_89c642d0e8489ff2, m_89c642d0e8489ff2,
  2, 3, i_89c642d0e8489ff2, nullptr, nullptr, { &s_89c642d0e8489ff2, nullptr, bd_89c642d0e8489ff2, 0, sizeof(bd_89c642d0e8489ff2) / sizeof(bd_89c642d0e8489ff2[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<122> b_870b474a2c5ac2da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
     16,   0,   0,   0,   1,   0,   2,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      5,   0,   7,   0,   0,   0,   7,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 143,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     77,  97, 103, 110, 101, 116, 105,  99,
     70, 105, 101, 108, 100,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   0,   0,   0,   3,   0,   1,   0,
      0,   1,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    253,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    252,   0,   0,   0,   3,   0,   1,   0,
      8,   1,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    160, 138, 183, 192, 112,  61, 195, 128,
      5,   1,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33, 108, 211,  67,  37,   0, 173, 224,
    241,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0, 250, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    212,   0,   0,   0,   3,   0,   1,   0,
    224,   0,   0,   0,   2,   0,   1,   0,
      6,   0, 249, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     67,   0,  23, 194, 241, 220,  94, 151,
    221,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117, 109,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 102,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 112, 117, 116, 101, 100,
     70, 105, 101, 108, 100,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    241, 216,  56,  83, 126, 211, 247, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108,  97, 109, 101, 110, 116,
     70, 105, 101, 108, 100,   0,   0,   0,
    115,  99,  97, 108, 101,  66, 121,   0,
    105, 110, 118, 101, 114, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,  55, 120,  77,  97, 103, 110, 101,
    116, 105,  99,  67, 111, 110, 102, 105,
    103,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_870b474a2c5ac2da = b_870b474a2c5ac2da.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_870b474a2c5ac2da[] = {
  &s_80c33d70c0b78aa0,
  &s_870b474a2c5ac2da,
  &s_975edcf1c2170043,
  &s_c85b8a7758032008,
  &s_d6f7d37e5338d8f1,
  &s_e0ad002543d36c21,
};
static const uint16_t m_870b474a2c5ac2da[] = {2, 3, 5, 1, 4, 0, 6};
static const uint16_t i_870b474a2c5ac2da[] = {0, 1, 2, 3, 4, 5, 6};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_870b474a2c5ac2da[] = {
  { 16777217,  ::fsc::DataRef< ::fsc::MagneticField>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_870b474a2c5ac2da = {
  0x870b474a2c5ac2da, b_870b474a2c5ac2da.words, 122, d_870b474a2c5ac2da, m_870b474a2c5ac2da,
  6, 7, i_870b474a2c5ac2da, nullptr, nullptr, { &s_870b474a2c5ac2da, nullptr, bd_870b474a2c5ac2da, 0, sizeof(bd_870b474a2c5ac2da) / sizeof(bd_870b474a2c5ac2da[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_80c33d70c0b78aa0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    160, 138, 183, 192, 112,  61, 195, 128,
     30,   0,   0,   0,   1,   0,   2,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     77,  97, 103, 110, 101, 116, 105,  99,
     70, 105, 101, 108, 100,  46, 102, 105,
    108,  97, 109, 101, 110, 116,  70, 105,
    101, 108, 100,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
     99, 117, 114, 114, 101, 110, 116,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 105, 111, 116,  83,  97, 118,  97,
    114, 116,  83, 101, 116, 116, 105, 110,
    103, 115,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236,  85, 235, 237,  26,  91, 128, 162,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 105, 108,  97, 109, 101, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     17, 228,  27, 168,  36, 128,  49, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 110, 100, 105, 110, 103,  78,
    111,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_80c33d70c0b78aa0 = b_80c33d70c0b78aa0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_80c33d70c0b78aa0[] = {
  &s_870b474a2c5ac2da,
  &s_a2805b1aedeb55ec,
  &s_fb318024a81be411,
};
static const uint16_t m_80c33d70c0b78aa0[] = {1, 0, 2, 3};
static const uint16_t i_80c33d70c0b78aa0[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_80c33d70c0b78aa0 = {
  0x80c33d70c0b78aa0, b_80c33d70c0b78aa0.words, 83, d_80c33d70c0b78aa0, m_80c33d70c0b78aa0,
  3, 4, i_80c33d70c0b78aa0, nullptr, nullptr, { &s_80c33d70c0b78aa0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_e0ad002543d36c21 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33, 108, 211,  67,  37,   0, 173, 224,
     30,   0,   0,   0,   1,   0,   2,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     77,  97, 103, 110, 101, 116, 105,  99,
     70, 105, 101, 108, 100,  46, 115,  99,
     97, 108, 101,  66, 121,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    102, 105, 101, 108, 100,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  97,  99, 116, 111, 114,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e0ad002543d36c21 = b_e0ad002543d36c21.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e0ad002543d36c21[] = {
  &s_870b474a2c5ac2da,
};
static const uint16_t m_e0ad002543d36c21[] = {1, 0};
static const uint16_t i_e0ad002543d36c21[] = {0, 1};
const ::capnp::_::RawSchema s_e0ad002543d36c21 = {
  0xe0ad002543d36c21, b_e0ad002543d36c21.words, 48, d_e0ad002543d36c21, m_e0ad002543d36c21,
  1, 2, i_e0ad002543d36c21, nullptr, nullptr, { &s_e0ad002543d36c21, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_975edcf1c2170043 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     67,   0,  23, 194, 241, 220,  94, 151,
     30,   0,   0,   0,   1,   0,   2,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      5,   0,   7,   0,   1,   0,   2,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     77,  97, 103, 110, 101, 116, 105,  99,
     70, 105, 101, 108, 100,  46, 119,  55,
    120,  77,  97, 103, 110, 101, 116, 105,
     99,  67, 111, 110, 102, 105, 103,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     17, 247,  67, 184, 227, 167,  26, 165,
     41,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    167,  99, 125,  53, 214, 121, 234, 175,
     21,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 102, 105, 103, 117, 114,
     97, 116, 105, 111, 110,  68,  66,   0,
     99, 111, 105, 108, 115,  65, 110, 100,
     67, 117, 114, 114, 101, 110, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_975edcf1c2170043 = b_975edcf1c2170043.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_975edcf1c2170043[] = {
  &s_870b474a2c5ac2da,
  &s_a51aa7e3b843f711,
  &s_afea79d6357d63a7,
};
static const uint16_t m_975edcf1c2170043[] = {1, 0};
static const uint16_t i_975edcf1c2170043[] = {0, 1};
const ::capnp::_::RawSchema s_975edcf1c2170043 = {
  0x975edcf1c2170043, b_975edcf1c2170043.words, 38, d_975edcf1c2170043, m_975edcf1c2170043,
  3, 2, i_975edcf1c2170043, nullptr, nullptr, { &s_975edcf1c2170043, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_a51aa7e3b843f711 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     17, 247,  67, 184, 227, 167,  26, 165,
     48,   0,   0,   0,   1,   0,   2,   0,
     67,   0,  23, 194, 241, 220,  94, 151,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     77,  97, 103, 110, 101, 116, 105,  99,
     70, 105, 101, 108, 100,  46, 119,  55,
    120,  77,  97, 103, 110, 101, 116, 105,
     99,  67, 111, 110, 102, 105, 103,  46,
     99, 111, 110, 102, 105, 103, 117, 114,
     97, 116, 105, 111, 110,  68,  66,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
     98, 105, 111, 116,  83,  97, 118,  97,
    114, 116,  83, 101, 116, 116, 105, 110,
    103, 115,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    236,  85, 235, 237,  26,  91, 128, 162,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 102, 105, 103,  73,  68,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a51aa7e3b843f711 = b_a51aa7e3b843f711.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a51aa7e3b843f711[] = {
  &s_975edcf1c2170043,
  &s_a2805b1aedeb55ec,
};
static const uint16_t m_a51aa7e3b843f711[] = {0, 1};
static const uint16_t i_a51aa7e3b843f711[] = {0, 1};
const ::capnp::_::RawSchema s_a51aa7e3b843f711 = {
  0xa51aa7e3b843f711, b_a51aa7e3b843f711.words, 54, d_a51aa7e3b843f711, m_a51aa7e3b843f711,
  2, 2, i_a51aa7e3b843f711, nullptr, nullptr, { &s_a51aa7e3b843f711, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<128> b_afea79d6357d63a7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    167,  99, 125,  53, 214, 121, 234, 175,
     48,   0,   0,   0,   1,   0,   2,   0,
     67,   0,  23, 194, 241, 220,  94, 151,
      5,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
     77,  97, 103, 110, 101, 116, 105,  99,
     70, 105, 101, 108, 100,  46, 119,  55,
    120,  77,  97, 103, 110, 101, 116, 105,
     99,  67, 111, 110, 102, 105, 103,  46,
     99, 111, 105, 108, 115,  65, 110, 100,
     67, 117, 114, 114, 101, 110, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,  12,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    152,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,  13,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,  14,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    220,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,  15,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    232,   0,   0,   0,   3,   0,   1,   0,
      4,   1,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   4,   0,   0,   0,
      0,   0,   1,   0,  16,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   1,   0,   0,   3,   0,   1,   0,
     16,   1,   0,   0,   2,   0,   1,   0,
    110, 111, 110, 112, 108,  97, 110,  97,
    114,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  45,   0,   0,   0,
      0,   0,   0,   0,   0, 136, 195,  64,
      0,   0,   0,   0,   0, 136, 195,  64,
      0,   0,   0,   0,   0, 136, 195,  64,
      0,   0,   0,   0,   0, 136, 195,  64,
      0,   0,   0,   0,   0, 136, 195,  64,
    112, 108,  97, 110,  97, 114,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  21,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114, 105, 109,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  45,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 114, 111, 108,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  21,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 105, 108, 115,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     60,  48,  67,  83, 129, 169, 167, 154,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_afea79d6357d63a7 = b_afea79d6357d63a7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_afea79d6357d63a7[] = {
  &s_975edcf1c2170043,
  &s_9aa7a9815343303c,
};
static const uint16_t m_afea79d6357d63a7[] = {4, 3, 0, 1, 2};
static const uint16_t i_afea79d6357d63a7[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_afea79d6357d63a7 = {
  0xafea79d6357d63a7, b_afea79d6357d63a7.words, 128, d_afea79d6357d63a7, m_afea79d6357d63a7,
  2, 5, i_afea79d6357d63a7, nullptr, nullptr, { &s_afea79d6357d63a7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_86db6f59154312af = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    175,  18,  67,  21,  89, 111, 219, 134,
     16,   0,   0,   0,   4,   0,   0,   0,
      2, 183, 129,  99, 203,  41, 108, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 103, 110, 101, 116, 105,  99,
    115,  46,  99,  97, 112, 110, 112,  58,
    119,  55, 120,  69,  73,  77, 112, 108,
    117, 115,  50,  53,  50,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    218, 194,  90,  44,  74,  71,  11, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   2,   0,   5,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86db6f59154312af = b_86db6f59154312af.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_86db6f59154312af = {
  0x86db6f59154312af, b_86db6f59154312af.words, 31, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_86db6f59154312af, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace fsc {

// ToroidalGrid
constexpr uint16_t ToroidalGrid::_capnpPrivate::dataWordSize;
constexpr uint16_t ToroidalGrid::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ToroidalGrid::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ToroidalGrid::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ComputedField
constexpr uint16_t ComputedField::_capnpPrivate::dataWordSize;
constexpr uint16_t ComputedField::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ComputedField::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ComputedField::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::fsc::FieldResolver::ResolveParams,  ::fsc::FieldResolver::ResolveResults>
FieldResolver::Client::resolveRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::fsc::FieldResolver::ResolveParams,  ::fsc::FieldResolver::ResolveResults>(
      0xd5818633d1cde9fcull, 0, sizeHint);
}
::kj::Promise<void> FieldResolver::Server::resolve(ResolveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "magnetics.capnp:FieldResolver", "resolve",
      0xd5818633d1cde9fcull, 0);
}
::capnp::Capability::Server::DispatchCallResult FieldResolver::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd5818633d1cde9fcull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("magnetics.capnp:FieldResolver", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult FieldResolver::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        resolve(::capnp::Capability::Server::internalGetTypedContext<
             ::fsc::FieldResolver::ResolveParams,  ::fsc::FieldResolver::ResolveResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "magnetics.capnp:FieldResolver",
          0xd5818633d1cde9fcull, methodId);
  }
}
#endif  // !CAPNP_LITE

// FieldResolver
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldResolver::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldResolver::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// FieldResolver::ResolveParams
constexpr uint16_t FieldResolver::ResolveParams::_capnpPrivate::dataWordSize;
constexpr uint16_t FieldResolver::ResolveParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldResolver::ResolveParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldResolver::ResolveParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// FieldResolver::ResolveResults
constexpr uint16_t FieldResolver::ResolveResults::_capnpPrivate::dataWordSize;
constexpr uint16_t FieldResolver::ResolveResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldResolver::ResolveResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldResolver::ResolveResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::fsc::FieldCalculator::GetParams,  ::fsc::FieldCalculator::GetResults>
FieldCalculator::Client::getRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::fsc::FieldCalculator::GetParams,  ::fsc::FieldCalculator::GetResults>(
      0xe1c57425184be19aull, 0, sizeHint);
}
::kj::Promise<void> FieldCalculator::Server::get(GetContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "magnetics.capnp:FieldCalculator", "get",
      0xe1c57425184be19aull, 0);
}
::capnp::Capability::Server::DispatchCallResult FieldCalculator::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe1c57425184be19aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("magnetics.capnp:FieldCalculator", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult FieldCalculator::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        get(::capnp::Capability::Server::internalGetTypedContext<
             ::fsc::FieldCalculator::GetParams,  ::fsc::FieldCalculator::GetResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "magnetics.capnp:FieldCalculator",
          0xe1c57425184be19aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// FieldCalculator
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldCalculator::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldCalculator::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// FieldCalculator::GetParams
constexpr uint16_t FieldCalculator::GetParams::_capnpPrivate::dataWordSize;
constexpr uint16_t FieldCalculator::GetParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldCalculator::GetParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldCalculator::GetParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// FieldCalculator::GetResults
constexpr uint16_t FieldCalculator::GetResults::_capnpPrivate::dataWordSize;
constexpr uint16_t FieldCalculator::GetResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldCalculator::GetResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldCalculator::GetResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::fsc::FieldCalculationSession::ComputeParams,  ::fsc::FieldCalculationSession::ComputeResults>
FieldCalculationSession::Client::computeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::fsc::FieldCalculationSession::ComputeParams,  ::fsc::FieldCalculationSession::ComputeResults>(
      0xabbd547289980102ull, 0, sizeHint);
}
::kj::Promise<void> FieldCalculationSession::Server::compute(ComputeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "magnetics.capnp:FieldCalculationSession", "compute",
      0xabbd547289980102ull, 0);
}
::capnp::Capability::Server::DispatchCallResult FieldCalculationSession::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xabbd547289980102ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("magnetics.capnp:FieldCalculationSession", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult FieldCalculationSession::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        compute(::capnp::Capability::Server::internalGetTypedContext<
             ::fsc::FieldCalculationSession::ComputeParams,  ::fsc::FieldCalculationSession::ComputeResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "magnetics.capnp:FieldCalculationSession",
          0xabbd547289980102ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// FieldCalculationSession
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldCalculationSession::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldCalculationSession::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// FieldCalculationSession::ComputeParams
constexpr uint16_t FieldCalculationSession::ComputeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t FieldCalculationSession::ComputeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldCalculationSession::ComputeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldCalculationSession::ComputeParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// FieldCalculationSession::ComputeResults
constexpr uint16_t FieldCalculationSession::ComputeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t FieldCalculationSession::ComputeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind FieldCalculationSession::ComputeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* FieldCalculationSession::ComputeResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// BiotSavartSettings
constexpr uint16_t BiotSavartSettings::_capnpPrivate::dataWordSize;
constexpr uint16_t BiotSavartSettings::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind BiotSavartSettings::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* BiotSavartSettings::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Filament
constexpr uint16_t Filament::_capnpPrivate::dataWordSize;
constexpr uint16_t Filament::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Filament::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Filament::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// W7XCoilSet
constexpr uint16_t W7XCoilSet::_capnpPrivate::dataWordSize;
constexpr uint16_t W7XCoilSet::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind W7XCoilSet::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* W7XCoilSet::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// W7XCoilSet::CoilsDBSet
constexpr uint16_t W7XCoilSet::CoilsDBSet::_capnpPrivate::dataWordSize;
constexpr uint16_t W7XCoilSet::CoilsDBSet::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind W7XCoilSet::CoilsDBSet::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* W7XCoilSet::CoilsDBSet::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// W7XCoilSet::CustomCoilSet
constexpr uint16_t W7XCoilSet::CustomCoilSet::_capnpPrivate::dataWordSize;
constexpr uint16_t W7XCoilSet::CustomCoilSet::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind W7XCoilSet::CustomCoilSet::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* W7XCoilSet::CustomCoilSet::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MagneticField
constexpr uint16_t MagneticField::_capnpPrivate::dataWordSize;
constexpr uint16_t MagneticField::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MagneticField::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MagneticField::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MagneticField::FilamentField
constexpr uint16_t MagneticField::FilamentField::_capnpPrivate::dataWordSize;
constexpr uint16_t MagneticField::FilamentField::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MagneticField::FilamentField::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MagneticField::FilamentField::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MagneticField::ScaleBy
constexpr uint16_t MagneticField::ScaleBy::_capnpPrivate::dataWordSize;
constexpr uint16_t MagneticField::ScaleBy::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MagneticField::ScaleBy::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MagneticField::ScaleBy::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MagneticField::W7xMagneticConfig
constexpr uint16_t MagneticField::W7xMagneticConfig::_capnpPrivate::dataWordSize;
constexpr uint16_t MagneticField::W7xMagneticConfig::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MagneticField::W7xMagneticConfig::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MagneticField::W7xMagneticConfig::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MagneticField::W7xMagneticConfig::ConfigurationDB
constexpr uint16_t MagneticField::W7xMagneticConfig::ConfigurationDB::_capnpPrivate::dataWordSize;
constexpr uint16_t MagneticField::W7xMagneticConfig::ConfigurationDB::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MagneticField::W7xMagneticConfig::ConfigurationDB::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MagneticField::W7xMagneticConfig::ConfigurationDB::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MagneticField::W7xMagneticConfig::CoilsAndCurrents
constexpr uint16_t MagneticField::W7xMagneticConfig::CoilsAndCurrents::_capnpPrivate::dataWordSize;
constexpr uint16_t MagneticField::W7xMagneticConfig::CoilsAndCurrents::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MagneticField::W7xMagneticConfig::CoilsAndCurrents::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MagneticField::W7xMagneticConfig::CoilsAndCurrents::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

const ::capnp::_::ConstStruct< ::fsc::MagneticField> W7X_E_I_MPLUS252(::capnp::schemas::b_86db6f59154312af.words + 23);

}  // namespace

