// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: data-test.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "data.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a9c4d5c3c8a32747);
CAPNP_DECLARE_SCHEMA(dbb3816b5ef1601e);
CAPNP_DECLARE_SCHEMA(e8adfd51b47716b7);
CAPNP_DECLARE_SCHEMA(e57a24fca8d0a916);
CAPNP_DECLARE_SCHEMA(ba8c4a97a231c4f7);
CAPNP_DECLARE_SCHEMA(85d4b9d6f18ffdb0);
CAPNP_DECLARE_SCHEMA(fd784653ea3351c9);
CAPNP_DECLARE_SCHEMA(ff9d6bc5ec416652);
CAPNP_DECLARE_SCHEMA(cc3499fdb77885f1);
CAPNP_DECLARE_SCHEMA(d90da0c93d4ca462);
CAPNP_DECLARE_SCHEMA(b9aa5d29920515c9);
CAPNP_DECLARE_SCHEMA(d0c1be6fb97e82da);
CAPNP_DECLARE_SCHEMA(eebbf200a9df3b61);
CAPNP_DECLARE_SCHEMA(ecff86942830eedf);
CAPNP_DECLARE_SCHEMA(95db87859feed3fa);
CAPNP_DECLARE_SCHEMA(9ed4686bdccec6d8);
CAPNP_DECLARE_SCHEMA(f1ea3529b395368e);
CAPNP_DECLARE_SCHEMA(d5099ff4a7a13c8b);
CAPNP_DECLARE_SCHEMA(87c0ee696db386de);
CAPNP_DECLARE_SCHEMA(ac4ac0658b03b552);

}  // namespace schemas
}  // namespace capnp

namespace fsc {
namespace test {

struct DataHolder {
  DataHolder() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9c4d5c3c8a32747, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

template <typename T = ::capnp::AnyPointer>
struct DataRefHolder {
  DataRefHolder() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dbb3816b5ef1601e, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

struct A {
  A() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(e8adfd51b47716b7)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct B {
  B() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE


  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(e57a24fca8d0a916)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct TestStruct {
  TestStruct() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Ints;
  struct Uints;
  struct Pointers;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba8c4a97a231c4f7, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestStruct::Ints {
  Ints() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INT8,
    INT16,
    INT32,
    INT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85d4b9d6f18ffdb0, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestStruct::Uints {
  Uints() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UINT8,
    UINT16,
    UINT32,
    UINT64,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd784653ea3351c9, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestStruct::Pointers {
  Pointers() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff9d6bc5ec416652, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST0;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST1;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST2;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST3;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST4;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST5;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST6;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST7;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST8;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST9;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST10;
extern const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST11;
// =======================================================================================

class DataHolder::Reader {
public:
  typedef DataHolder Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DataHolder::Builder {
public:
  typedef DataHolder Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DataHolder::Pipeline {
public:
  typedef DataHolder Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class DataRefHolder<T>::Reader {
public:
  typedef DataRefHolder Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename DataRefHolder<T2>::Reader asGeneric() {
    return typename DataRefHolder<T2>::Reader(_reader);
  }

  inline bool hasRef() const;
#if !CAPNP_LITE
  inline typename  ::fsc::DataRef<T>::Client getRef() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class DataRefHolder<T>::Builder {
public:
  typedef DataRefHolder Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename DataRefHolder<T2>::Builder asGeneric() {
    return typename DataRefHolder<T2>::Builder(_builder);
  }

  inline bool hasRef();
#if !CAPNP_LITE
  inline typename  ::fsc::DataRef<T>::Client getRef();
  inline void setRef(typename  ::fsc::DataRef<T>::Client&& value);
  inline void setRef(typename  ::fsc::DataRef<T>::Client& value);
  inline void adoptRef(::capnp::Orphan< ::fsc::DataRef<T>>&& value);
  inline ::capnp::Orphan< ::fsc::DataRef<T>> disownRef();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class DataRefHolder<T>::Pipeline {
public:
  typedef DataRefHolder Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename  ::fsc::DataRef<T>::Client getRef();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class A::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef A Calls;
  typedef A Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class A::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef A Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::fsc::test::A::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::fsc::test::A>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class B::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::fsc::test::A::Client {
public:
  typedef B Calls;
  typedef B Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);


protected:
  Client() = default;
};

class B::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::fsc::test::A::Server {
public:
  typedef B Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:

  inline  ::fsc::test::B::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::fsc::test::B>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class TestStruct::Reader {
public:
  typedef TestStruct Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getVoid() const;

  inline bool getBool() const;

  inline typename Ints::Reader getInts() const;

  inline typename Uints::Reader getUints() const;

  inline typename Pointers::Reader getPointers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestStruct::Builder {
public:
  typedef TestStruct Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getVoid();
  inline void setVoid( ::capnp::Void value = ::capnp::VOID);

  inline bool getBool();
  inline void setBool(bool value);

  inline typename Ints::Builder getInts();
  inline typename Ints::Builder initInts();

  inline typename Uints::Builder getUints();
  inline typename Uints::Builder initUints();

  inline typename Pointers::Builder getPointers();
  inline typename Pointers::Builder initPointers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestStruct::Pipeline {
public:
  typedef TestStruct Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Ints::Pipeline getInts();
  inline typename Uints::Pipeline getUints();
  inline typename Pointers::Pipeline getPointers();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestStruct::Ints::Reader {
public:
  typedef Ints Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInt8() const;
  inline  ::int8_t getInt8() const;

  inline bool isInt16() const;
  inline  ::int16_t getInt16() const;

  inline bool isInt32() const;
  inline  ::int32_t getInt32() const;

  inline bool isInt64() const;
  inline  ::int64_t getInt64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestStruct::Ints::Builder {
public:
  typedef Ints Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInt8();
  inline  ::int8_t getInt8();
  inline void setInt8( ::int8_t value);

  inline bool isInt16();
  inline  ::int16_t getInt16();
  inline void setInt16( ::int16_t value);

  inline bool isInt32();
  inline  ::int32_t getInt32();
  inline void setInt32( ::int32_t value);

  inline bool isInt64();
  inline  ::int64_t getInt64();
  inline void setInt64( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestStruct::Ints::Pipeline {
public:
  typedef Ints Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestStruct::Uints::Reader {
public:
  typedef Uints Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUint8() const;
  inline  ::uint8_t getUint8() const;

  inline bool isUint16() const;
  inline  ::uint16_t getUint16() const;

  inline bool isUint32() const;
  inline  ::uint32_t getUint32() const;

  inline bool isUint64() const;
  inline  ::uint64_t getUint64() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestStruct::Uints::Builder {
public:
  typedef Uints Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUint8();
  inline  ::uint8_t getUint8();
  inline void setUint8( ::uint8_t value);

  inline bool isUint16();
  inline  ::uint16_t getUint16();
  inline void setUint16( ::uint16_t value);

  inline bool isUint32();
  inline  ::uint32_t getUint32();
  inline void setUint32( ::uint32_t value);

  inline bool isUint64();
  inline  ::uint64_t getUint64();
  inline void setUint64( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestStruct::Uints::Pipeline {
public:
  typedef Uints Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestStruct::Pointers::Reader {
public:
  typedef Pointers Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

  inline bool hasText() const;
  inline  ::capnp::Text::Reader getText() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestStruct::Pointers::Builder {
public:
  typedef Pointers Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

  inline bool hasText();
  inline  ::capnp::Text::Builder getText();
  inline void setText( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initText(unsigned int size);
  inline void adoptText(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownText();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestStruct::Pointers::Pipeline {
public:
  typedef Pointers Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool DataHolder::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DataHolder::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader DataHolder::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder DataHolder::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DataHolder::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder DataHolder::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DataHolder::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> DataHolder::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename T>
inline bool DataRefHolder<T>::Reader::hasRef() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool DataRefHolder<T>::Builder::hasRef() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename T>
inline typename  ::fsc::DataRef<T>::Client DataRefHolder<T>::Reader::getRef() const {
  return ::capnp::_::PointerHelpers< ::fsc::DataRef<T>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::fsc::DataRef<T>::Client DataRefHolder<T>::Builder::getRef() {
  return ::capnp::_::PointerHelpers< ::fsc::DataRef<T>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::fsc::DataRef<T>::Client DataRefHolder<T>::Pipeline::getRef() {
  return typename  ::fsc::DataRef<T>::Client(_typeless.getPointerField(0).asCap());
}
template <typename T>
inline void DataRefHolder<T>::Builder::setRef(typename  ::fsc::DataRef<T>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::fsc::DataRef<T>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
template <typename T>
inline void DataRefHolder<T>::Builder::setRef(typename  ::fsc::DataRef<T>::Client& cap) {
  ::capnp::_::PointerHelpers< ::fsc::DataRef<T>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
template <typename T>
inline void DataRefHolder<T>::Builder::adoptRef(
    ::capnp::Orphan< ::fsc::DataRef<T>>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::DataRef<T>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan< ::fsc::DataRef<T>> DataRefHolder<T>::Builder::disownRef() {
  return ::capnp::_::PointerHelpers< ::fsc::DataRef<T>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// DataRefHolder<T>
template <typename T>
constexpr uint16_t DataRefHolder<T>::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t DataRefHolder<T>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind DataRefHolder<T>::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* DataRefHolder<T>::_capnpPrivate::schema;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope DataRefHolder<T>::_capnpPrivate::brandScopes[] = {
  { 0xdbb3816b5ef1601e, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding DataRefHolder<T>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency DataRefHolder<T>::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::fsc::DataRef<T>::_capnpPrivate::brand() },
};
template <typename T>
const ::capnp::_::RawBrandedSchema DataRefHolder<T>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_dbb3816b5ef1601e, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline A::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline A::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline A::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline A::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline A::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::fsc::test::A::Client& A::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::fsc::test::A::Client& A::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
#if !CAPNP_LITE
inline B::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline B::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline B::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline B::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline B::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::fsc::test::B::Client& B::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::fsc::test::B::Client& B::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline  ::capnp::Void TestStruct::Reader::getVoid() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void TestStruct::Builder::getVoid() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Builder::setVoid( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Reader::getBool() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TestStruct::Builder::getBool() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Builder::setBool(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename TestStruct::Ints::Reader TestStruct::Reader::getInts() const {
  return typename TestStruct::Ints::Reader(_reader);
}
inline typename TestStruct::Ints::Builder TestStruct::Builder::getInts() {
  return typename TestStruct::Ints::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestStruct::Ints::Pipeline TestStruct::Pipeline::getInts() {
  return typename TestStruct::Ints::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestStruct::Ints::Builder TestStruct::Builder::initInts() {
  _builder.setDataField< ::uint8_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  return typename TestStruct::Ints::Builder(_builder);
}
inline typename TestStruct::Uints::Reader TestStruct::Reader::getUints() const {
  return typename TestStruct::Uints::Reader(_reader);
}
inline typename TestStruct::Uints::Builder TestStruct::Builder::getUints() {
  return typename TestStruct::Uints::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestStruct::Uints::Pipeline TestStruct::Pipeline::getUints() {
  return typename TestStruct::Uints::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestStruct::Uints::Builder TestStruct::Builder::initUints() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<8>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<9>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<5>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<3>() * ::capnp::ELEMENTS, 0);
  return typename TestStruct::Uints::Builder(_builder);
}
inline typename TestStruct::Pointers::Reader TestStruct::Reader::getPointers() const {
  return typename TestStruct::Pointers::Reader(_reader);
}
inline typename TestStruct::Pointers::Builder TestStruct::Builder::getPointers() {
  return typename TestStruct::Pointers::Builder(_builder);
}
#if !CAPNP_LITE
inline typename TestStruct::Pointers::Pipeline TestStruct::Pipeline::getPointers() {
  return typename TestStruct::Pointers::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename TestStruct::Pointers::Builder TestStruct::Builder::initPointers() {
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename TestStruct::Pointers::Builder(_builder);
}
inline  ::fsc::test::TestStruct::Ints::Which TestStruct::Ints::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::fsc::test::TestStruct::Ints::Which TestStruct::Ints::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool TestStruct::Ints::Reader::isInt8() const {
  return which() == TestStruct::Ints::INT8;
}
inline bool TestStruct::Ints::Builder::isInt8() {
  return which() == TestStruct::Ints::INT8;
}
inline  ::int8_t TestStruct::Ints::Reader::getInt8() const {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int8_t TestStruct::Ints::Builder::getInt8() {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Ints::Builder::setInt8( ::int8_t value) {
  _builder.setDataField<TestStruct::Ints::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, TestStruct::Ints::INT8);
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Ints::Reader::isInt16() const {
  return which() == TestStruct::Ints::INT16;
}
inline bool TestStruct::Ints::Builder::isInt16() {
  return which() == TestStruct::Ints::INT16;
}
inline  ::int16_t TestStruct::Ints::Reader::getInt16() const {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t TestStruct::Ints::Builder::getInt16() {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Ints::Builder::setInt16( ::int16_t value) {
  _builder.setDataField<TestStruct::Ints::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, TestStruct::Ints::INT16);
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Ints::Reader::isInt32() const {
  return which() == TestStruct::Ints::INT32;
}
inline bool TestStruct::Ints::Builder::isInt32() {
  return which() == TestStruct::Ints::INT32;
}
inline  ::int32_t TestStruct::Ints::Reader::getInt32() const {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TestStruct::Ints::Builder::getInt32() {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Ints::Builder::setInt32( ::int32_t value) {
  _builder.setDataField<TestStruct::Ints::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, TestStruct::Ints::INT32);
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Ints::Reader::isInt64() const {
  return which() == TestStruct::Ints::INT64;
}
inline bool TestStruct::Ints::Builder::isInt64() {
  return which() == TestStruct::Ints::INT64;
}
inline  ::int64_t TestStruct::Ints::Reader::getInt64() const {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t TestStruct::Ints::Builder::getInt64() {
  KJ_IREQUIRE((which() == TestStruct::Ints::INT64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Ints::Builder::setInt64( ::int64_t value) {
  _builder.setDataField<TestStruct::Ints::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, TestStruct::Ints::INT64);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::fsc::test::TestStruct::Uints::Which TestStruct::Uints::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline  ::fsc::test::TestStruct::Uints::Which TestStruct::Uints::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline bool TestStruct::Uints::Reader::isUint8() const {
  return which() == TestStruct::Uints::UINT8;
}
inline bool TestStruct::Uints::Builder::isUint8() {
  return which() == TestStruct::Uints::UINT8;
}
inline  ::uint8_t TestStruct::Uints::Reader::getUint8() const {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t TestStruct::Uints::Builder::getUint8() {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Uints::Builder::setUint8( ::uint8_t value) {
  _builder.setDataField<TestStruct::Uints::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestStruct::Uints::UINT8);
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Uints::Reader::isUint16() const {
  return which() == TestStruct::Uints::UINT16;
}
inline bool TestStruct::Uints::Builder::isUint16() {
  return which() == TestStruct::Uints::UINT16;
}
inline  ::uint16_t TestStruct::Uints::Reader::getUint16() const {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TestStruct::Uints::Builder::getUint16() {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Uints::Builder::setUint16( ::uint16_t value) {
  _builder.setDataField<TestStruct::Uints::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestStruct::Uints::UINT16);
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Uints::Reader::isUint32() const {
  return which() == TestStruct::Uints::UINT32;
}
inline bool TestStruct::Uints::Builder::isUint32() {
  return which() == TestStruct::Uints::UINT32;
}
inline  ::uint32_t TestStruct::Uints::Reader::getUint32() const {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t TestStruct::Uints::Builder::getUint32() {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Uints::Builder::setUint32( ::uint32_t value) {
  _builder.setDataField<TestStruct::Uints::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestStruct::Uints::UINT32);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Uints::Reader::isUint64() const {
  return which() == TestStruct::Uints::UINT64;
}
inline bool TestStruct::Uints::Builder::isUint64() {
  return which() == TestStruct::Uints::UINT64;
}
inline  ::uint64_t TestStruct::Uints::Reader::getUint64() const {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t TestStruct::Uints::Builder::getUint64() {
  KJ_IREQUIRE((which() == TestStruct::Uints::UINT64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void TestStruct::Uints::Builder::setUint64( ::uint64_t value) {
  _builder.setDataField<TestStruct::Uints::Which>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, TestStruct::Uints::UINT64);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool TestStruct::Pointers::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestStruct::Pointers::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader TestStruct::Pointers::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder TestStruct::Pointers::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestStruct::Pointers::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder TestStruct::Pointers::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestStruct::Pointers::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> TestStruct::Pointers::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TestStruct::Pointers::Reader::hasText() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TestStruct::Pointers::Builder::hasText() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestStruct::Pointers::Reader::getText() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestStruct::Pointers::Builder::getText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TestStruct::Pointers::Builder::setText( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestStruct::Pointers::Builder::initText(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TestStruct::Pointers::Builder::adoptText(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestStruct::Pointers::Builder::disownText() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

