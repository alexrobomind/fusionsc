// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: magnetics.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "data.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c3d9985615db9b44);
CAPNP_DECLARE_SCHEMA(d6f7d37e5338d8f1);
CAPNP_DECLARE_SCHEMA(d5818633d1cde9fc);
CAPNP_DECLARE_SCHEMA(f117827dd91fcd74);
CAPNP_DECLARE_SCHEMA(a2ed9b18167cc7ef);
CAPNP_DECLARE_SCHEMA(e1c57425184be19a);
CAPNP_DECLARE_SCHEMA(c328c5824a4372c0);
CAPNP_DECLARE_SCHEMA(d86a54c62fc5d3b1);
CAPNP_DECLARE_SCHEMA(abbd547289980102);
CAPNP_DECLARE_SCHEMA(829dfbdeb49ce58b);
CAPNP_DECLARE_SCHEMA(e3c9fc9c608e65ab);
CAPNP_DECLARE_SCHEMA(a2805b1aedeb55ec);
CAPNP_DECLARE_SCHEMA(fb318024a81be411);
CAPNP_DECLARE_SCHEMA(9aa7a9815343303c);
CAPNP_DECLARE_SCHEMA(baf7d2da32e4f0eb);
CAPNP_DECLARE_SCHEMA(89c642d0e8489ff2);
CAPNP_DECLARE_SCHEMA(870b474a2c5ac2da);
CAPNP_DECLARE_SCHEMA(80c33d70c0b78aa0);
CAPNP_DECLARE_SCHEMA(e0ad002543d36c21);
CAPNP_DECLARE_SCHEMA(975edcf1c2170043);
CAPNP_DECLARE_SCHEMA(a51aa7e3b843f711);
CAPNP_DECLARE_SCHEMA(afea79d6357d63a7);
CAPNP_DECLARE_SCHEMA(86db6f59154312af);

}  // namespace schemas
}  // namespace capnp

namespace fsc {

struct ToroidalGrid {
  ToroidalGrid() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3d9985615db9b44, 8, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ComputedField {
  ComputedField() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d6f7d37e5338d8f1, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FieldResolver {
  FieldResolver() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct ResolveParams;
  struct ResolveResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(d5818633d1cde9fc)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct FieldResolver::ResolveParams {
  ResolveParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f117827dd91fcd74, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FieldResolver::ResolveResults {
  ResolveResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2ed9b18167cc7ef, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FieldCalculator {
  FieldCalculator() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct GetParams;
  struct GetResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(e1c57425184be19a)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct FieldCalculator::GetParams {
  GetParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c328c5824a4372c0, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FieldCalculator::GetResults {
  GetResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d86a54c62fc5d3b1, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FieldCalculationSession {
  FieldCalculationSession() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct ComputeParams;
  struct ComputeResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(abbd547289980102)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct FieldCalculationSession::ComputeParams {
  ComputeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(829dfbdeb49ce58b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FieldCalculationSession::ComputeResults {
  ComputeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3c9fc9c608e65ab, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BiotSavartSettings {
  BiotSavartSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2805b1aedeb55ec, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Filament {
  Filament() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INLINE,
    REF,
    W7X_COILS_D_B,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fb318024a81be411, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct W7XCoilSet {
  W7XCoilSet() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    COILS_D_B_SET,
    CUSTOM_COIL_SET,
  };
  struct CoilsDBSet;
  struct CustomCoilSet;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9aa7a9815343303c, 2, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct W7XCoilSet::CoilsDBSet {
  CoilsDBSet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(baf7d2da32e4f0eb, 2, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct W7XCoilSet::CustomCoilSet {
  CustomCoilSet() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(89c642d0e8489ff2, 2, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MagneticField {
  MagneticField() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    SUM,
    REF,
    COMPUTED_FIELD,
    FILAMENT_FIELD,
    SCALE_BY,
    INVERT,
    W7X_MAGNETIC_CONFIG,
  };
  struct FilamentField;
  struct ScaleBy;
  struct W7xMagneticConfig;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(870b474a2c5ac2da, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MagneticField::FilamentField {
  FilamentField() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80c33d70c0b78aa0, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MagneticField::ScaleBy {
  ScaleBy() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e0ad002543d36c21, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MagneticField::W7xMagneticConfig {
  W7xMagneticConfig() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    CONFIGURATION_D_B,
    COILS_AND_CURRENTS,
  };
  struct ConfigurationDB;
  struct CoilsAndCurrents;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(975edcf1c2170043, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MagneticField::W7xMagneticConfig::ConfigurationDB {
  ConfigurationDB() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a51aa7e3b843f711, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MagneticField::W7xMagneticConfig::CoilsAndCurrents {
  CoilsAndCurrents() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(afea79d6357d63a7, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

extern const ::capnp::_::ConstStruct< ::fsc::MagneticField> W7X_E_I_MPLUS252;
// =======================================================================================

class ToroidalGrid::Reader {
public:
  typedef ToroidalGrid Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getRMin() const;

  inline double getRMax() const;

  inline double getZMin() const;

  inline double getZMax() const;

  inline  ::uint32_t getNSym() const;

  inline  ::uint64_t getNR() const;

  inline  ::uint64_t getNZ() const;

  inline  ::uint64_t getNPhi() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ToroidalGrid::Builder {
public:
  typedef ToroidalGrid Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getRMin();
  inline void setRMin(double value);

  inline double getRMax();
  inline void setRMax(double value);

  inline double getZMin();
  inline void setZMin(double value);

  inline double getZMax();
  inline void setZMax(double value);

  inline  ::uint32_t getNSym();
  inline void setNSym( ::uint32_t value);

  inline  ::uint64_t getNR();
  inline void setNR( ::uint64_t value);

  inline  ::uint64_t getNZ();
  inline void setNZ( ::uint64_t value);

  inline  ::uint64_t getNPhi();
  inline void setNPhi( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ToroidalGrid::Pipeline {
public:
  typedef ToroidalGrid Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ComputedField::Reader {
public:
  typedef ComputedField Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGrid() const;
  inline  ::fsc::ToroidalGrid::Reader getGrid() const;

  inline bool hasData() const;
#if !CAPNP_LITE
  inline  ::fsc::DataRef< ::fsc::Float64Tensor>::Client getData() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ComputedField::Builder {
public:
  typedef ComputedField Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGrid();
  inline  ::fsc::ToroidalGrid::Builder getGrid();
  inline void setGrid( ::fsc::ToroidalGrid::Reader value);
  inline  ::fsc::ToroidalGrid::Builder initGrid();
  inline void adoptGrid(::capnp::Orphan< ::fsc::ToroidalGrid>&& value);
  inline ::capnp::Orphan< ::fsc::ToroidalGrid> disownGrid();

  inline bool hasData();
#if !CAPNP_LITE
  inline  ::fsc::DataRef< ::fsc::Float64Tensor>::Client getData();
  inline void setData( ::fsc::DataRef< ::fsc::Float64Tensor>::Client&& value);
  inline void setData( ::fsc::DataRef< ::fsc::Float64Tensor>::Client& value);
  inline void adoptData(::capnp::Orphan< ::fsc::DataRef< ::fsc::Float64Tensor>>&& value);
  inline ::capnp::Orphan< ::fsc::DataRef< ::fsc::Float64Tensor>> disownData();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ComputedField::Pipeline {
public:
  typedef ComputedField Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::ToroidalGrid::Pipeline getGrid();
  inline  ::fsc::DataRef< ::fsc::Float64Tensor>::Client getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class FieldResolver::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef FieldResolver Calls;
  typedef FieldResolver Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::fsc::FieldResolver::ResolveParams,  ::fsc::FieldResolver::ResolveResults> resolveRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class FieldResolver::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef FieldResolver Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::fsc::FieldResolver::ResolveParams ResolveParams;
  typedef  ::fsc::FieldResolver::ResolveResults ResolveResults;
  typedef ::capnp::CallContext<ResolveParams, ResolveResults> ResolveContext;
  virtual ::kj::Promise<void> resolve(ResolveContext context);

  inline  ::fsc::FieldResolver::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::fsc::FieldResolver>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class FieldResolver::ResolveParams::Reader {
public:
  typedef ResolveParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasField() const;
  inline  ::fsc::MagneticField::Reader getField() const;

  inline bool getFollowRefs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FieldResolver::ResolveParams::Builder {
public:
  typedef ResolveParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasField();
  inline  ::fsc::MagneticField::Builder getField();
  inline void setField( ::fsc::MagneticField::Reader value);
  inline  ::fsc::MagneticField::Builder initField();
  inline void adoptField(::capnp::Orphan< ::fsc::MagneticField>&& value);
  inline ::capnp::Orphan< ::fsc::MagneticField> disownField();

  inline bool getFollowRefs();
  inline void setFollowRefs(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FieldResolver::ResolveParams::Pipeline {
public:
  typedef ResolveParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::MagneticField::Pipeline getField();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FieldResolver::ResolveResults::Reader {
public:
  typedef ResolveResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasField() const;
  inline  ::fsc::MagneticField::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FieldResolver::ResolveResults::Builder {
public:
  typedef ResolveResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasField();
  inline  ::fsc::MagneticField::Builder getField();
  inline void setField( ::fsc::MagneticField::Reader value);
  inline  ::fsc::MagneticField::Builder initField();
  inline void adoptField(::capnp::Orphan< ::fsc::MagneticField>&& value);
  inline ::capnp::Orphan< ::fsc::MagneticField> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FieldResolver::ResolveResults::Pipeline {
public:
  typedef ResolveResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::MagneticField::Pipeline getField();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class FieldCalculator::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef FieldCalculator Calls;
  typedef FieldCalculator Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::fsc::FieldCalculator::GetParams,  ::fsc::FieldCalculator::GetResults> getRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class FieldCalculator::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef FieldCalculator Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::fsc::FieldCalculator::GetParams GetParams;
  typedef  ::fsc::FieldCalculator::GetResults GetResults;
  typedef ::capnp::CallContext<GetParams, GetResults> GetContext;
  virtual ::kj::Promise<void> get(GetContext context);

  inline  ::fsc::FieldCalculator::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::fsc::FieldCalculator>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class FieldCalculator::GetParams::Reader {
public:
  typedef GetParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGrid() const;
  inline  ::fsc::ToroidalGrid::Reader getGrid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FieldCalculator::GetParams::Builder {
public:
  typedef GetParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGrid();
  inline  ::fsc::ToroidalGrid::Builder getGrid();
  inline void setGrid( ::fsc::ToroidalGrid::Reader value);
  inline  ::fsc::ToroidalGrid::Builder initGrid();
  inline void adoptGrid(::capnp::Orphan< ::fsc::ToroidalGrid>&& value);
  inline ::capnp::Orphan< ::fsc::ToroidalGrid> disownGrid();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FieldCalculator::GetParams::Pipeline {
public:
  typedef GetParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::ToroidalGrid::Pipeline getGrid();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FieldCalculator::GetResults::Reader {
public:
  typedef GetResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSession() const;
#if !CAPNP_LITE
  inline  ::fsc::FieldCalculationSession::Client getSession() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FieldCalculator::GetResults::Builder {
public:
  typedef GetResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSession();
#if !CAPNP_LITE
  inline  ::fsc::FieldCalculationSession::Client getSession();
  inline void setSession( ::fsc::FieldCalculationSession::Client&& value);
  inline void setSession( ::fsc::FieldCalculationSession::Client& value);
  inline void adoptSession(::capnp::Orphan< ::fsc::FieldCalculationSession>&& value);
  inline ::capnp::Orphan< ::fsc::FieldCalculationSession> disownSession();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FieldCalculator::GetResults::Pipeline {
public:
  typedef GetResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::FieldCalculationSession::Client getSession();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class FieldCalculationSession::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef FieldCalculationSession Calls;
  typedef FieldCalculationSession Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::fsc::FieldCalculationSession::ComputeParams,  ::fsc::FieldCalculationSession::ComputeResults> computeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class FieldCalculationSession::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef FieldCalculationSession Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::fsc::FieldCalculationSession::ComputeParams ComputeParams;
  typedef  ::fsc::FieldCalculationSession::ComputeResults ComputeResults;
  typedef ::capnp::CallContext<ComputeParams, ComputeResults> ComputeContext;
  virtual ::kj::Promise<void> compute(ComputeContext context);

  inline  ::fsc::FieldCalculationSession::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::fsc::FieldCalculationSession>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class FieldCalculationSession::ComputeParams::Reader {
public:
  typedef ComputeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasField() const;
  inline  ::fsc::MagneticField::Reader getField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FieldCalculationSession::ComputeParams::Builder {
public:
  typedef ComputeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasField();
  inline  ::fsc::MagneticField::Builder getField();
  inline void setField( ::fsc::MagneticField::Reader value);
  inline  ::fsc::MagneticField::Builder initField();
  inline void adoptField(::capnp::Orphan< ::fsc::MagneticField>&& value);
  inline ::capnp::Orphan< ::fsc::MagneticField> disownField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FieldCalculationSession::ComputeParams::Pipeline {
public:
  typedef ComputeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::MagneticField::Pipeline getField();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FieldCalculationSession::ComputeResults::Reader {
public:
  typedef ComputeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasComputedField() const;
  inline  ::fsc::ComputedField::Reader getComputedField() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FieldCalculationSession::ComputeResults::Builder {
public:
  typedef ComputeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasComputedField();
  inline  ::fsc::ComputedField::Builder getComputedField();
  inline void setComputedField( ::fsc::ComputedField::Reader value);
  inline  ::fsc::ComputedField::Builder initComputedField();
  inline void adoptComputedField(::capnp::Orphan< ::fsc::ComputedField>&& value);
  inline ::capnp::Orphan< ::fsc::ComputedField> disownComputedField();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FieldCalculationSession::ComputeResults::Pipeline {
public:
  typedef ComputeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::ComputedField::Pipeline getComputedField();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BiotSavartSettings::Reader {
public:
  typedef BiotSavartSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getWidth() const;

  inline double getStepSize() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BiotSavartSettings::Builder {
public:
  typedef BiotSavartSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getWidth();
  inline void setWidth(double value);

  inline double getStepSize();
  inline void setStepSize(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BiotSavartSettings::Pipeline {
public:
  typedef BiotSavartSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Filament::Reader {
public:
  typedef Filament Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isInline() const;
  inline bool hasInline() const;
  inline  ::fsc::Float64Tensor::Reader getInline() const;

  inline bool isRef() const;
  inline bool hasRef() const;
#if !CAPNP_LITE
  inline  ::fsc::DataRef< ::fsc::Filament>::Client getRef() const;
#endif  // !CAPNP_LITE

  inline bool isW7xCoilsDB() const;
  inline  ::uint64_t getW7xCoilsDB() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Filament::Builder {
public:
  typedef Filament Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isInline();
  inline bool hasInline();
  inline  ::fsc::Float64Tensor::Builder getInline();
  inline void setInline( ::fsc::Float64Tensor::Reader value);
  inline  ::fsc::Float64Tensor::Builder initInline();
  inline void adoptInline(::capnp::Orphan< ::fsc::Float64Tensor>&& value);
  inline ::capnp::Orphan< ::fsc::Float64Tensor> disownInline();

  inline bool isRef();
  inline bool hasRef();
#if !CAPNP_LITE
  inline  ::fsc::DataRef< ::fsc::Filament>::Client getRef();
  inline void setRef( ::fsc::DataRef< ::fsc::Filament>::Client&& value);
  inline void setRef( ::fsc::DataRef< ::fsc::Filament>::Client& value);
  inline void adoptRef(::capnp::Orphan< ::fsc::DataRef< ::fsc::Filament>>&& value);
  inline ::capnp::Orphan< ::fsc::DataRef< ::fsc::Filament>> disownRef();
#endif  // !CAPNP_LITE

  inline bool isW7xCoilsDB();
  inline  ::uint64_t getW7xCoilsDB();
  inline void setW7xCoilsDB( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Filament::Pipeline {
public:
  typedef Filament Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class W7XCoilSet::Reader {
public:
  typedef W7XCoilSet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool getInvertMainCoils() const;

  inline bool hasBiotSavartSettings() const;
  inline  ::fsc::BiotSavartSettings::Reader getBiotSavartSettings() const;

  inline bool isCoilsDBSet() const;
  inline typename CoilsDBSet::Reader getCoilsDBSet() const;

  inline bool isCustomCoilSet() const;
  inline typename CustomCoilSet::Reader getCustomCoilSet() const;

  inline bool hasNWindMain() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getNWindMain() const;

  inline bool hasNWindTrim() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getNWindTrim() const;

  inline bool hasNWindControl() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getNWindControl() const;

  inline bool hasInvertControlCoils() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getInvertControlCoils() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class W7XCoilSet::Builder {
public:
  typedef W7XCoilSet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool getInvertMainCoils();
  inline void setInvertMainCoils(bool value);

  inline bool hasBiotSavartSettings();
  inline  ::fsc::BiotSavartSettings::Builder getBiotSavartSettings();
  inline void setBiotSavartSettings( ::fsc::BiotSavartSettings::Reader value);
  inline  ::fsc::BiotSavartSettings::Builder initBiotSavartSettings();
  inline void adoptBiotSavartSettings(::capnp::Orphan< ::fsc::BiotSavartSettings>&& value);
  inline ::capnp::Orphan< ::fsc::BiotSavartSettings> disownBiotSavartSettings();

  inline bool isCoilsDBSet();
  inline typename CoilsDBSet::Builder getCoilsDBSet();
  inline typename CoilsDBSet::Builder initCoilsDBSet();

  inline bool isCustomCoilSet();
  inline typename CustomCoilSet::Builder getCustomCoilSet();
  inline typename CustomCoilSet::Builder initCustomCoilSet();

  inline bool hasNWindMain();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getNWindMain();
  inline void setNWindMain( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNWindMain(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initNWindMain(unsigned int size);
  inline void adoptNWindMain(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownNWindMain();

  inline bool hasNWindTrim();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getNWindTrim();
  inline void setNWindTrim( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNWindTrim(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initNWindTrim(unsigned int size);
  inline void adoptNWindTrim(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownNWindTrim();

  inline bool hasNWindControl();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getNWindControl();
  inline void setNWindControl( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNWindControl(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initNWindControl(unsigned int size);
  inline void adoptNWindControl(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownNWindControl();

  inline bool hasInvertControlCoils();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getInvertControlCoils();
  inline void setInvertControlCoils( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInvertControlCoils(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initInvertControlCoils(unsigned int size);
  inline void adoptInvertControlCoils(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownInvertControlCoils();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class W7XCoilSet::Pipeline {
public:
  typedef W7XCoilSet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::BiotSavartSettings::Pipeline getBiotSavartSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class W7XCoilSet::CoilsDBSet::Reader {
public:
  typedef CoilsDBSet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMainCoilOffset() const;

  inline bool hasTrimCoilIDs() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getTrimCoilIDs() const;

  inline  ::uint32_t getControlCoilOffset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class W7XCoilSet::CoilsDBSet::Builder {
public:
  typedef CoilsDBSet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getMainCoilOffset();
  inline void setMainCoilOffset( ::uint32_t value);

  inline bool hasTrimCoilIDs();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getTrimCoilIDs();
  inline void setTrimCoilIDs( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTrimCoilIDs(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initTrimCoilIDs(unsigned int size);
  inline void adoptTrimCoilIDs(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownTrimCoilIDs();

  inline  ::uint32_t getControlCoilOffset();
  inline void setControlCoilOffset( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class W7XCoilSet::CoilsDBSet::Pipeline {
public:
  typedef CoilsDBSet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class W7XCoilSet::CustomCoilSet::Reader {
public:
  typedef CustomCoilSet Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMainCoils() const;
#if !CAPNP_LITE
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader getMainCoils() const;
#endif  // !CAPNP_LITE

  inline bool hasTrimCoils() const;
#if !CAPNP_LITE
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader getTrimCoils() const;
#endif  // !CAPNP_LITE

  inline bool hasControlCoils() const;
#if !CAPNP_LITE
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader getControlCoils() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class W7XCoilSet::CustomCoilSet::Builder {
public:
  typedef CustomCoilSet Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMainCoils();
#if !CAPNP_LITE
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder getMainCoils();
  inline void setMainCoils( ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader value);
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder initMainCoils(unsigned int size);
  inline void adoptMainCoils(::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>> disownMainCoils();
#endif  // !CAPNP_LITE

  inline bool hasTrimCoils();
#if !CAPNP_LITE
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder getTrimCoils();
  inline void setTrimCoils( ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader value);
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder initTrimCoils(unsigned int size);
  inline void adoptTrimCoils(::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>> disownTrimCoils();
#endif  // !CAPNP_LITE

  inline bool hasControlCoils();
#if !CAPNP_LITE
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder getControlCoils();
  inline void setControlCoils( ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader value);
  inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder initControlCoils(unsigned int size);
  inline void adoptControlCoils(::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>> disownControlCoils();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class W7XCoilSet::CustomCoilSet::Pipeline {
public:
  typedef CustomCoilSet Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MagneticField::Reader {
public:
  typedef MagneticField Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isSum() const;
  inline bool hasSum() const;
  inline  ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Reader getSum() const;

  inline bool isRef() const;
  inline bool hasRef() const;
#if !CAPNP_LITE
  inline  ::fsc::DataRef< ::fsc::MagneticField>::Client getRef() const;
#endif  // !CAPNP_LITE

  inline bool isComputedField() const;
  inline bool hasComputedField() const;
  inline  ::fsc::ComputedField::Reader getComputedField() const;

  inline bool isFilamentField() const;
  inline typename FilamentField::Reader getFilamentField() const;

  inline bool isScaleBy() const;
  inline typename ScaleBy::Reader getScaleBy() const;

  inline bool isInvert() const;
  inline bool hasInvert() const;
  inline  ::fsc::MagneticField::Reader getInvert() const;

  inline bool isW7xMagneticConfig() const;
  inline typename W7xMagneticConfig::Reader getW7xMagneticConfig() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MagneticField::Builder {
public:
  typedef MagneticField Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isSum();
  inline bool hasSum();
  inline  ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Builder getSum();
  inline void setSum( ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Builder initSum(unsigned int size);
  inline void adoptSum(::capnp::Orphan< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>> disownSum();

  inline bool isRef();
  inline bool hasRef();
#if !CAPNP_LITE
  inline  ::fsc::DataRef< ::fsc::MagneticField>::Client getRef();
  inline void setRef( ::fsc::DataRef< ::fsc::MagneticField>::Client&& value);
  inline void setRef( ::fsc::DataRef< ::fsc::MagneticField>::Client& value);
  inline void adoptRef(::capnp::Orphan< ::fsc::DataRef< ::fsc::MagneticField>>&& value);
  inline ::capnp::Orphan< ::fsc::DataRef< ::fsc::MagneticField>> disownRef();
#endif  // !CAPNP_LITE

  inline bool isComputedField();
  inline bool hasComputedField();
  inline  ::fsc::ComputedField::Builder getComputedField();
  inline void setComputedField( ::fsc::ComputedField::Reader value);
  inline  ::fsc::ComputedField::Builder initComputedField();
  inline void adoptComputedField(::capnp::Orphan< ::fsc::ComputedField>&& value);
  inline ::capnp::Orphan< ::fsc::ComputedField> disownComputedField();

  inline bool isFilamentField();
  inline typename FilamentField::Builder getFilamentField();
  inline typename FilamentField::Builder initFilamentField();

  inline bool isScaleBy();
  inline typename ScaleBy::Builder getScaleBy();
  inline typename ScaleBy::Builder initScaleBy();

  inline bool isInvert();
  inline bool hasInvert();
  inline  ::fsc::MagneticField::Builder getInvert();
  inline void setInvert( ::fsc::MagneticField::Reader value);
  inline  ::fsc::MagneticField::Builder initInvert();
  inline void adoptInvert(::capnp::Orphan< ::fsc::MagneticField>&& value);
  inline ::capnp::Orphan< ::fsc::MagneticField> disownInvert();

  inline bool isW7xMagneticConfig();
  inline typename W7xMagneticConfig::Builder getW7xMagneticConfig();
  inline typename W7xMagneticConfig::Builder initW7xMagneticConfig();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MagneticField::Pipeline {
public:
  typedef MagneticField Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MagneticField::FilamentField::Reader {
public:
  typedef FilamentField Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getCurrent() const;

  inline bool hasBiotSavartSettings() const;
  inline  ::fsc::BiotSavartSettings::Reader getBiotSavartSettings() const;

  inline bool hasFilament() const;
  inline  ::fsc::Filament::Reader getFilament() const;

  inline  ::uint32_t getWindingNo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MagneticField::FilamentField::Builder {
public:
  typedef FilamentField Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getCurrent();
  inline void setCurrent(double value);

  inline bool hasBiotSavartSettings();
  inline  ::fsc::BiotSavartSettings::Builder getBiotSavartSettings();
  inline void setBiotSavartSettings( ::fsc::BiotSavartSettings::Reader value);
  inline  ::fsc::BiotSavartSettings::Builder initBiotSavartSettings();
  inline void adoptBiotSavartSettings(::capnp::Orphan< ::fsc::BiotSavartSettings>&& value);
  inline ::capnp::Orphan< ::fsc::BiotSavartSettings> disownBiotSavartSettings();

  inline bool hasFilament();
  inline  ::fsc::Filament::Builder getFilament();
  inline void setFilament( ::fsc::Filament::Reader value);
  inline  ::fsc::Filament::Builder initFilament();
  inline void adoptFilament(::capnp::Orphan< ::fsc::Filament>&& value);
  inline ::capnp::Orphan< ::fsc::Filament> disownFilament();

  inline  ::uint32_t getWindingNo();
  inline void setWindingNo( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MagneticField::FilamentField::Pipeline {
public:
  typedef FilamentField Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::BiotSavartSettings::Pipeline getBiotSavartSettings();
  inline  ::fsc::Filament::Pipeline getFilament();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MagneticField::ScaleBy::Reader {
public:
  typedef ScaleBy Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasField() const;
  inline  ::fsc::MagneticField::Reader getField() const;

  inline double getFactor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MagneticField::ScaleBy::Builder {
public:
  typedef ScaleBy Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasField();
  inline  ::fsc::MagneticField::Builder getField();
  inline void setField( ::fsc::MagneticField::Reader value);
  inline  ::fsc::MagneticField::Builder initField();
  inline void adoptField(::capnp::Orphan< ::fsc::MagneticField>&& value);
  inline ::capnp::Orphan< ::fsc::MagneticField> disownField();

  inline double getFactor();
  inline void setFactor(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MagneticField::ScaleBy::Pipeline {
public:
  typedef ScaleBy Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::MagneticField::Pipeline getField();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MagneticField::W7xMagneticConfig::Reader {
public:
  typedef W7xMagneticConfig Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isConfigurationDB() const;
  inline typename ConfigurationDB::Reader getConfigurationDB() const;

  inline bool isCoilsAndCurrents() const;
  inline typename CoilsAndCurrents::Reader getCoilsAndCurrents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MagneticField::W7xMagneticConfig::Builder {
public:
  typedef W7xMagneticConfig Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isConfigurationDB();
  inline typename ConfigurationDB::Builder getConfigurationDB();
  inline typename ConfigurationDB::Builder initConfigurationDB();

  inline bool isCoilsAndCurrents();
  inline typename CoilsAndCurrents::Builder getCoilsAndCurrents();
  inline typename CoilsAndCurrents::Builder initCoilsAndCurrents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MagneticField::W7xMagneticConfig::Pipeline {
public:
  typedef W7xMagneticConfig Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MagneticField::W7xMagneticConfig::ConfigurationDB::Reader {
public:
  typedef ConfigurationDB Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasBiotSavartSettings() const;
  inline  ::fsc::BiotSavartSettings::Reader getBiotSavartSettings() const;

  inline  ::uint64_t getConfigID() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MagneticField::W7xMagneticConfig::ConfigurationDB::Builder {
public:
  typedef ConfigurationDB Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasBiotSavartSettings();
  inline  ::fsc::BiotSavartSettings::Builder getBiotSavartSettings();
  inline void setBiotSavartSettings( ::fsc::BiotSavartSettings::Reader value);
  inline  ::fsc::BiotSavartSettings::Builder initBiotSavartSettings();
  inline void adoptBiotSavartSettings(::capnp::Orphan< ::fsc::BiotSavartSettings>&& value);
  inline ::capnp::Orphan< ::fsc::BiotSavartSettings> disownBiotSavartSettings();

  inline  ::uint64_t getConfigID();
  inline void setConfigID( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MagneticField::W7xMagneticConfig::ConfigurationDB::Pipeline {
public:
  typedef ConfigurationDB Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::BiotSavartSettings::Pipeline getBiotSavartSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader {
public:
  typedef CoilsAndCurrents Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNonplanar() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getNonplanar() const;

  inline bool hasPlanar() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getPlanar() const;

  inline bool hasTrim() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getTrim() const;

  inline bool hasControl() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getControl() const;

  inline bool hasCoils() const;
  inline  ::fsc::W7XCoilSet::Reader getCoils() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder {
public:
  typedef CoilsAndCurrents Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNonplanar();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getNonplanar();
  inline void setNonplanar( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setNonplanar(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initNonplanar(unsigned int size);
  inline void adoptNonplanar(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownNonplanar();

  inline bool hasPlanar();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getPlanar();
  inline void setPlanar( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setPlanar(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initPlanar(unsigned int size);
  inline void adoptPlanar(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownPlanar();

  inline bool hasTrim();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getTrim();
  inline void setTrim( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTrim(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initTrim(unsigned int size);
  inline void adoptTrim(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownTrim();

  inline bool hasControl();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getControl();
  inline void setControl( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setControl(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initControl(unsigned int size);
  inline void adoptControl(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownControl();

  inline bool hasCoils();
  inline  ::fsc::W7XCoilSet::Builder getCoils();
  inline void setCoils( ::fsc::W7XCoilSet::Reader value);
  inline  ::fsc::W7XCoilSet::Builder initCoils();
  inline void adoptCoils(::capnp::Orphan< ::fsc::W7XCoilSet>&& value);
  inline ::capnp::Orphan< ::fsc::W7XCoilSet> disownCoils();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MagneticField::W7xMagneticConfig::CoilsAndCurrents::Pipeline {
public:
  typedef CoilsAndCurrents Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::W7XCoilSet::Pipeline getCoils();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline double ToroidalGrid::Reader::getRMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double ToroidalGrid::Builder::getRMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ToroidalGrid::Builder::setRMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double ToroidalGrid::Reader::getRMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ToroidalGrid::Builder::getRMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ToroidalGrid::Builder::setRMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double ToroidalGrid::Reader::getZMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double ToroidalGrid::Builder::getZMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void ToroidalGrid::Builder::setZMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double ToroidalGrid::Reader::getZMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double ToroidalGrid::Builder::getZMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ToroidalGrid::Builder::setZMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ToroidalGrid::Reader::getNSym() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 1u);
}

inline  ::uint32_t ToroidalGrid::Builder::getNSym() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 1u);
}
inline void ToroidalGrid::Builder::setNSym( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 1u);
}

inline  ::uint64_t ToroidalGrid::Reader::getNR() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ToroidalGrid::Builder::getNR() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ToroidalGrid::Builder::setNR( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ToroidalGrid::Reader::getNZ() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ToroidalGrid::Builder::getNZ() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ToroidalGrid::Builder::setNZ( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t ToroidalGrid::Reader::getNPhi() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t ToroidalGrid::Builder::getNPhi() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ToroidalGrid::Builder::setNPhi( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ComputedField::Reader::hasGrid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ComputedField::Builder::hasGrid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::ToroidalGrid::Reader ComputedField::Reader::getGrid() const {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::ToroidalGrid::Builder ComputedField::Builder::getGrid() {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::ToroidalGrid::Pipeline ComputedField::Pipeline::getGrid() {
  return  ::fsc::ToroidalGrid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ComputedField::Builder::setGrid( ::fsc::ToroidalGrid::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::ToroidalGrid::Builder ComputedField::Builder::initGrid() {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ComputedField::Builder::adoptGrid(
    ::capnp::Orphan< ::fsc::ToroidalGrid>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::ToroidalGrid> ComputedField::Builder::disownGrid() {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ComputedField::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ComputedField::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::fsc::DataRef< ::fsc::Float64Tensor>::Client ComputedField::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Float64Tensor>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fsc::DataRef< ::fsc::Float64Tensor>::Client ComputedField::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Float64Tensor>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fsc::DataRef< ::fsc::Float64Tensor>::Client ComputedField::Pipeline::getData() {
  return  ::fsc::DataRef< ::fsc::Float64Tensor>::Client(_typeless.getPointerField(1).asCap());
}
inline void ComputedField::Builder::setData( ::fsc::DataRef< ::fsc::Float64Tensor>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Float64Tensor>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void ComputedField::Builder::setData( ::fsc::DataRef< ::fsc::Float64Tensor>::Client& cap) {
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Float64Tensor>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), cap);
}
inline void ComputedField::Builder::adoptData(
    ::capnp::Orphan< ::fsc::DataRef< ::fsc::Float64Tensor>>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Float64Tensor>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::DataRef< ::fsc::Float64Tensor>> ComputedField::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Float64Tensor>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline FieldResolver::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline FieldResolver::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline FieldResolver::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline FieldResolver::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline FieldResolver::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::fsc::FieldResolver::Client& FieldResolver::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::fsc::FieldResolver::Client& FieldResolver::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool FieldResolver::ResolveParams::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FieldResolver::ResolveParams::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::MagneticField::Reader FieldResolver::ResolveParams::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::MagneticField::Builder FieldResolver::ResolveParams::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::MagneticField::Pipeline FieldResolver::ResolveParams::Pipeline::getField() {
  return  ::fsc::MagneticField::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FieldResolver::ResolveParams::Builder::setField( ::fsc::MagneticField::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::MagneticField::Builder FieldResolver::ResolveParams::Builder::initField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FieldResolver::ResolveParams::Builder::adoptField(
    ::capnp::Orphan< ::fsc::MagneticField>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::MagneticField> FieldResolver::ResolveParams::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FieldResolver::ResolveParams::Reader::getFollowRefs() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool FieldResolver::ResolveParams::Builder::getFollowRefs() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FieldResolver::ResolveParams::Builder::setFollowRefs(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FieldResolver::ResolveResults::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FieldResolver::ResolveResults::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::MagneticField::Reader FieldResolver::ResolveResults::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::MagneticField::Builder FieldResolver::ResolveResults::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::MagneticField::Pipeline FieldResolver::ResolveResults::Pipeline::getField() {
  return  ::fsc::MagneticField::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FieldResolver::ResolveResults::Builder::setField( ::fsc::MagneticField::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::MagneticField::Builder FieldResolver::ResolveResults::Builder::initField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FieldResolver::ResolveResults::Builder::adoptField(
    ::capnp::Orphan< ::fsc::MagneticField>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::MagneticField> FieldResolver::ResolveResults::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline FieldCalculator::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline FieldCalculator::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline FieldCalculator::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline FieldCalculator::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline FieldCalculator::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::fsc::FieldCalculator::Client& FieldCalculator::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::fsc::FieldCalculator::Client& FieldCalculator::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool FieldCalculator::GetParams::Reader::hasGrid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FieldCalculator::GetParams::Builder::hasGrid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::ToroidalGrid::Reader FieldCalculator::GetParams::Reader::getGrid() const {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::ToroidalGrid::Builder FieldCalculator::GetParams::Builder::getGrid() {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::ToroidalGrid::Pipeline FieldCalculator::GetParams::Pipeline::getGrid() {
  return  ::fsc::ToroidalGrid::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FieldCalculator::GetParams::Builder::setGrid( ::fsc::ToroidalGrid::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::ToroidalGrid::Builder FieldCalculator::GetParams::Builder::initGrid() {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FieldCalculator::GetParams::Builder::adoptGrid(
    ::capnp::Orphan< ::fsc::ToroidalGrid>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::ToroidalGrid> FieldCalculator::GetParams::Builder::disownGrid() {
  return ::capnp::_::PointerHelpers< ::fsc::ToroidalGrid>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FieldCalculator::GetResults::Reader::hasSession() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FieldCalculator::GetResults::Builder::hasSession() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::fsc::FieldCalculationSession::Client FieldCalculator::GetResults::Reader::getSession() const {
  return ::capnp::_::PointerHelpers< ::fsc::FieldCalculationSession>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::FieldCalculationSession::Client FieldCalculator::GetResults::Builder::getSession() {
  return ::capnp::_::PointerHelpers< ::fsc::FieldCalculationSession>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::FieldCalculationSession::Client FieldCalculator::GetResults::Pipeline::getSession() {
  return  ::fsc::FieldCalculationSession::Client(_typeless.getPointerField(0).asCap());
}
inline void FieldCalculator::GetResults::Builder::setSession( ::fsc::FieldCalculationSession::Client&& cap) {
  ::capnp::_::PointerHelpers< ::fsc::FieldCalculationSession>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void FieldCalculator::GetResults::Builder::setSession( ::fsc::FieldCalculationSession::Client& cap) {
  ::capnp::_::PointerHelpers< ::fsc::FieldCalculationSession>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void FieldCalculator::GetResults::Builder::adoptSession(
    ::capnp::Orphan< ::fsc::FieldCalculationSession>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::FieldCalculationSession>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::FieldCalculationSession> FieldCalculator::GetResults::Builder::disownSession() {
  return ::capnp::_::PointerHelpers< ::fsc::FieldCalculationSession>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline FieldCalculationSession::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline FieldCalculationSession::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline FieldCalculationSession::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline FieldCalculationSession::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline FieldCalculationSession::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::fsc::FieldCalculationSession::Client& FieldCalculationSession::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::fsc::FieldCalculationSession::Client& FieldCalculationSession::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool FieldCalculationSession::ComputeParams::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FieldCalculationSession::ComputeParams::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::MagneticField::Reader FieldCalculationSession::ComputeParams::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::MagneticField::Builder FieldCalculationSession::ComputeParams::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::MagneticField::Pipeline FieldCalculationSession::ComputeParams::Pipeline::getField() {
  return  ::fsc::MagneticField::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FieldCalculationSession::ComputeParams::Builder::setField( ::fsc::MagneticField::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::MagneticField::Builder FieldCalculationSession::ComputeParams::Builder::initField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FieldCalculationSession::ComputeParams::Builder::adoptField(
    ::capnp::Orphan< ::fsc::MagneticField>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::MagneticField> FieldCalculationSession::ComputeParams::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FieldCalculationSession::ComputeResults::Reader::hasComputedField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FieldCalculationSession::ComputeResults::Builder::hasComputedField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::ComputedField::Reader FieldCalculationSession::ComputeResults::Reader::getComputedField() const {
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::ComputedField::Builder FieldCalculationSession::ComputeResults::Builder::getComputedField() {
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::ComputedField::Pipeline FieldCalculationSession::ComputeResults::Pipeline::getComputedField() {
  return  ::fsc::ComputedField::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FieldCalculationSession::ComputeResults::Builder::setComputedField( ::fsc::ComputedField::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::ComputedField>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::ComputedField::Builder FieldCalculationSession::ComputeResults::Builder::initComputedField() {
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FieldCalculationSession::ComputeResults::Builder::adoptComputedField(
    ::capnp::Orphan< ::fsc::ComputedField>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::ComputedField>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::ComputedField> FieldCalculationSession::ComputeResults::Builder::disownComputedField() {
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double BiotSavartSettings::Reader::getWidth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double BiotSavartSettings::Builder::getWidth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BiotSavartSettings::Builder::setWidth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double BiotSavartSettings::Reader::getStepSize() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double BiotSavartSettings::Builder::getStepSize() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void BiotSavartSettings::Builder::setStepSize(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::fsc::Filament::Which Filament::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::fsc::Filament::Which Filament::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Filament::Reader::isInline() const {
  return which() == Filament::INLINE;
}
inline bool Filament::Builder::isInline() {
  return which() == Filament::INLINE;
}
inline bool Filament::Reader::hasInline() const {
  if (which() != Filament::INLINE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Filament::Builder::hasInline() {
  if (which() != Filament::INLINE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::Float64Tensor::Reader Filament::Reader::getInline() const {
  KJ_IREQUIRE((which() == Filament::INLINE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::Float64Tensor>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::Float64Tensor::Builder Filament::Builder::getInline() {
  KJ_IREQUIRE((which() == Filament::INLINE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::Float64Tensor>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Filament::Builder::setInline( ::fsc::Float64Tensor::Reader value) {
  _builder.setDataField<Filament::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filament::INLINE);
  ::capnp::_::PointerHelpers< ::fsc::Float64Tensor>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::Float64Tensor::Builder Filament::Builder::initInline() {
  _builder.setDataField<Filament::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filament::INLINE);
  return ::capnp::_::PointerHelpers< ::fsc::Float64Tensor>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Filament::Builder::adoptInline(
    ::capnp::Orphan< ::fsc::Float64Tensor>&& value) {
  _builder.setDataField<Filament::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filament::INLINE);
  ::capnp::_::PointerHelpers< ::fsc::Float64Tensor>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::Float64Tensor> Filament::Builder::disownInline() {
  KJ_IREQUIRE((which() == Filament::INLINE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::Float64Tensor>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Filament::Reader::isRef() const {
  return which() == Filament::REF;
}
inline bool Filament::Builder::isRef() {
  return which() == Filament::REF;
}
inline bool Filament::Reader::hasRef() const {
  if (which() != Filament::REF) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Filament::Builder::hasRef() {
  if (which() != Filament::REF) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::fsc::DataRef< ::fsc::Filament>::Client Filament::Reader::getRef() const {
  KJ_IREQUIRE((which() == Filament::REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Filament>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::DataRef< ::fsc::Filament>::Client Filament::Builder::getRef() {
  KJ_IREQUIRE((which() == Filament::REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Filament>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Filament::Builder::setRef( ::fsc::DataRef< ::fsc::Filament>::Client&& cap) {
  _builder.setDataField<Filament::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filament::REF);
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Filament>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void Filament::Builder::setRef( ::fsc::DataRef< ::fsc::Filament>::Client& cap) {
  _builder.setDataField<Filament::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filament::REF);
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Filament>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void Filament::Builder::adoptRef(
    ::capnp::Orphan< ::fsc::DataRef< ::fsc::Filament>>&& value) {
  _builder.setDataField<Filament::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filament::REF);
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Filament>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::DataRef< ::fsc::Filament>> Filament::Builder::disownRef() {
  KJ_IREQUIRE((which() == Filament::REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::Filament>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Filament::Reader::isW7xCoilsDB() const {
  return which() == Filament::W7X_COILS_D_B;
}
inline bool Filament::Builder::isW7xCoilsDB() {
  return which() == Filament::W7X_COILS_D_B;
}
inline  ::uint64_t Filament::Reader::getW7xCoilsDB() const {
  KJ_IREQUIRE((which() == Filament::W7X_COILS_D_B),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Filament::Builder::getW7xCoilsDB() {
  KJ_IREQUIRE((which() == Filament::W7X_COILS_D_B),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Filament::Builder::setW7xCoilsDB( ::uint64_t value) {
  _builder.setDataField<Filament::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Filament::W7X_COILS_D_B);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::fsc::W7XCoilSet::Which W7XCoilSet::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::fsc::W7XCoilSet::Which W7XCoilSet::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool W7XCoilSet::Reader::getInvertMainCoils() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}

inline bool W7XCoilSet::Builder::getInvertMainCoils() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}
inline void W7XCoilSet::Builder::setInvertMainCoils(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, true);
}

inline bool W7XCoilSet::Reader::hasBiotSavartSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::Builder::hasBiotSavartSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::BiotSavartSettings::Reader W7XCoilSet::Reader::getBiotSavartSettings() const {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::BiotSavartSettings::Builder W7XCoilSet::Builder::getBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::BiotSavartSettings::Pipeline W7XCoilSet::Pipeline::getBiotSavartSettings() {
  return  ::fsc::BiotSavartSettings::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void W7XCoilSet::Builder::setBiotSavartSettings( ::fsc::BiotSavartSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::BiotSavartSettings::Builder W7XCoilSet::Builder::initBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void W7XCoilSet::Builder::adoptBiotSavartSettings(
    ::capnp::Orphan< ::fsc::BiotSavartSettings>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::BiotSavartSettings> W7XCoilSet::Builder::disownBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool W7XCoilSet::Reader::isCoilsDBSet() const {
  return which() == W7XCoilSet::COILS_D_B_SET;
}
inline bool W7XCoilSet::Builder::isCoilsDBSet() {
  return which() == W7XCoilSet::COILS_D_B_SET;
}
inline typename W7XCoilSet::CoilsDBSet::Reader W7XCoilSet::Reader::getCoilsDBSet() const {
  KJ_IREQUIRE((which() == W7XCoilSet::COILS_D_B_SET),
              "Must check which() before get()ing a union member.");
  return typename W7XCoilSet::CoilsDBSet::Reader(_reader);
}
inline typename W7XCoilSet::CoilsDBSet::Builder W7XCoilSet::Builder::getCoilsDBSet() {
  KJ_IREQUIRE((which() == W7XCoilSet::COILS_D_B_SET),
              "Must check which() before get()ing a union member.");
  return typename W7XCoilSet::CoilsDBSet::Builder(_builder);
}
inline typename W7XCoilSet::CoilsDBSet::Builder W7XCoilSet::Builder::initCoilsDBSet() {
  _builder.setDataField<W7XCoilSet::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, W7XCoilSet::COILS_D_B_SET);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename W7XCoilSet::CoilsDBSet::Builder(_builder);
}
inline bool W7XCoilSet::Reader::isCustomCoilSet() const {
  return which() == W7XCoilSet::CUSTOM_COIL_SET;
}
inline bool W7XCoilSet::Builder::isCustomCoilSet() {
  return which() == W7XCoilSet::CUSTOM_COIL_SET;
}
inline typename W7XCoilSet::CustomCoilSet::Reader W7XCoilSet::Reader::getCustomCoilSet() const {
  KJ_IREQUIRE((which() == W7XCoilSet::CUSTOM_COIL_SET),
              "Must check which() before get()ing a union member.");
  return typename W7XCoilSet::CustomCoilSet::Reader(_reader);
}
inline typename W7XCoilSet::CustomCoilSet::Builder W7XCoilSet::Builder::getCustomCoilSet() {
  KJ_IREQUIRE((which() == W7XCoilSet::CUSTOM_COIL_SET),
              "Must check which() before get()ing a union member.");
  return typename W7XCoilSet::CustomCoilSet::Builder(_builder);
}
inline typename W7XCoilSet::CustomCoilSet::Builder W7XCoilSet::Builder::initCustomCoilSet() {
  _builder.setDataField<W7XCoilSet::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, W7XCoilSet::CUSTOM_COIL_SET);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  return typename W7XCoilSet::CustomCoilSet::Builder(_builder);
}
inline bool W7XCoilSet::Reader::hasNWindMain() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::Builder::hasNWindMain() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader W7XCoilSet::Reader::getNWindMain() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 109);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::getNWindMain() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 109);
}
inline void W7XCoilSet::Builder::setNWindMain( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void W7XCoilSet::Builder::setNWindMain(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::initNWindMain(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::Builder::adoptNWindMain(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> W7XCoilSet::Builder::disownNWindMain() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool W7XCoilSet::Reader::hasNWindTrim() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::Builder::hasNWindTrim() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader W7XCoilSet::Reader::getNWindTrim() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 126);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::getNWindTrim() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 126);
}
inline void W7XCoilSet::Builder::setNWindTrim( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void W7XCoilSet::Builder::setNWindTrim(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::initNWindTrim(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::Builder::adoptNWindTrim(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> W7XCoilSet::Builder::disownNWindTrim() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool W7XCoilSet::Reader::hasNWindControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::Builder::hasNWindControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader W7XCoilSet::Reader::getNWindControl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 142);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::getNWindControl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 142);
}
inline void W7XCoilSet::Builder::setNWindControl( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void W7XCoilSet::Builder::setNWindControl(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::initNWindControl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::Builder::adoptNWindControl(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> W7XCoilSet::Builder::disownNWindControl() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool W7XCoilSet::Reader::hasInvertControlCoils() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::Builder::hasInvertControlCoils() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader W7XCoilSet::Reader::getInvertControlCoils() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 161);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::getInvertControlCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_9aa7a9815343303c + 161);
}
inline void W7XCoilSet::Builder::setInvertControlCoils( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void W7XCoilSet::Builder::setInvertControlCoils(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::Builder::initInvertControlCoils(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::Builder::adoptInvertControlCoils(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> W7XCoilSet::Builder::disownInvertControlCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::uint32_t W7XCoilSet::CoilsDBSet::Reader::getMainCoilOffset() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 160u);
}

inline  ::uint32_t W7XCoilSet::CoilsDBSet::Builder::getMainCoilOffset() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 160u);
}
inline void W7XCoilSet::CoilsDBSet::Builder::setMainCoilOffset( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 160u);
}

inline bool W7XCoilSet::CoilsDBSet::Reader::hasTrimCoilIDs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::CoilsDBSet::Builder::hasTrimCoilIDs() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader W7XCoilSet::CoilsDBSet::Reader::getTrimCoilIDs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_baf7d2da32e4f0eb + 60);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::CoilsDBSet::Builder::getTrimCoilIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_baf7d2da32e4f0eb + 60);
}
inline void W7XCoilSet::CoilsDBSet::Builder::setTrimCoilIDs( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void W7XCoilSet::CoilsDBSet::Builder::setTrimCoilIDs(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder W7XCoilSet::CoilsDBSet::Builder::initTrimCoilIDs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::CoilsDBSet::Builder::adoptTrimCoilIDs(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> W7XCoilSet::CoilsDBSet::Builder::disownTrimCoilIDs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t W7XCoilSet::CoilsDBSet::Reader::getControlCoilOffset() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 230u);
}

inline  ::uint32_t W7XCoilSet::CoilsDBSet::Builder::getControlCoilOffset() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 230u);
}
inline void W7XCoilSet::CoilsDBSet::Builder::setControlCoilOffset( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 230u);
}

inline bool W7XCoilSet::CustomCoilSet::Reader::hasMainCoils() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::CustomCoilSet::Builder::hasMainCoils() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader W7XCoilSet::CustomCoilSet::Reader::getMainCoils() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder W7XCoilSet::CustomCoilSet::Builder::getMainCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void W7XCoilSet::CustomCoilSet::Builder::setMainCoils( ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder W7XCoilSet::CustomCoilSet::Builder::initMainCoils(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::CustomCoilSet::Builder::adoptMainCoils(
    ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>> W7XCoilSet::CustomCoilSet::Builder::disownMainCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool W7XCoilSet::CustomCoilSet::Reader::hasTrimCoils() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::CustomCoilSet::Builder::hasTrimCoils() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader W7XCoilSet::CustomCoilSet::Reader::getTrimCoils() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder W7XCoilSet::CustomCoilSet::Builder::getTrimCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void W7XCoilSet::CustomCoilSet::Builder::setTrimCoils( ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder W7XCoilSet::CustomCoilSet::Builder::initTrimCoils(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::CustomCoilSet::Builder::adoptTrimCoils(
    ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>> W7XCoilSet::CustomCoilSet::Builder::disownTrimCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool W7XCoilSet::CustomCoilSet::Reader::hasControlCoils() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool W7XCoilSet::CustomCoilSet::Builder::hasControlCoils() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader W7XCoilSet::CustomCoilSet::Reader::getControlCoils() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder W7XCoilSet::CustomCoilSet::Builder::getControlCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void W7XCoilSet::CustomCoilSet::Builder::setControlCoils( ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>::Builder W7XCoilSet::CustomCoilSet::Builder::initControlCoils(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void W7XCoilSet::CustomCoilSet::Builder::adoptControlCoils(
    ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>> W7XCoilSet::CustomCoilSet::Builder::disownControlCoils() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::DataRef< ::fsc::Filament>,  ::capnp::Kind::INTERFACE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline  ::fsc::MagneticField::Which MagneticField::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::fsc::MagneticField::Which MagneticField::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool MagneticField::Reader::isSum() const {
  return which() == MagneticField::SUM;
}
inline bool MagneticField::Builder::isSum() {
  return which() == MagneticField::SUM;
}
inline bool MagneticField::Reader::hasSum() const {
  if (which() != MagneticField::SUM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::Builder::hasSum() {
  if (which() != MagneticField::SUM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Reader MagneticField::Reader::getSum() const {
  KJ_IREQUIRE((which() == MagneticField::SUM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Builder MagneticField::Builder::getSum() {
  KJ_IREQUIRE((which() == MagneticField::SUM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::Builder::setSum( ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Reader value) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::SUM);
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>::Builder MagneticField::Builder::initSum(unsigned int size) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::SUM);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MagneticField::Builder::adoptSum(
    ::capnp::Orphan< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>&& value) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::SUM);
  ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>> MagneticField::Builder::disownSum() {
  KJ_IREQUIRE((which() == MagneticField::SUM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::fsc::MagneticField,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MagneticField::Reader::isRef() const {
  return which() == MagneticField::REF;
}
inline bool MagneticField::Builder::isRef() {
  return which() == MagneticField::REF;
}
inline bool MagneticField::Reader::hasRef() const {
  if (which() != MagneticField::REF) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::Builder::hasRef() {
  if (which() != MagneticField::REF) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::fsc::DataRef< ::fsc::MagneticField>::Client MagneticField::Reader::getRef() const {
  KJ_IREQUIRE((which() == MagneticField::REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::MagneticField>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::DataRef< ::fsc::MagneticField>::Client MagneticField::Builder::getRef() {
  KJ_IREQUIRE((which() == MagneticField::REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::MagneticField>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::Builder::setRef( ::fsc::DataRef< ::fsc::MagneticField>::Client&& cap) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::REF);
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::MagneticField>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void MagneticField::Builder::setRef( ::fsc::DataRef< ::fsc::MagneticField>::Client& cap) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::REF);
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::MagneticField>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void MagneticField::Builder::adoptRef(
    ::capnp::Orphan< ::fsc::DataRef< ::fsc::MagneticField>>&& value) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::REF);
  ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::MagneticField>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::DataRef< ::fsc::MagneticField>> MagneticField::Builder::disownRef() {
  KJ_IREQUIRE((which() == MagneticField::REF),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::DataRef< ::fsc::MagneticField>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool MagneticField::Reader::isComputedField() const {
  return which() == MagneticField::COMPUTED_FIELD;
}
inline bool MagneticField::Builder::isComputedField() {
  return which() == MagneticField::COMPUTED_FIELD;
}
inline bool MagneticField::Reader::hasComputedField() const {
  if (which() != MagneticField::COMPUTED_FIELD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::Builder::hasComputedField() {
  if (which() != MagneticField::COMPUTED_FIELD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::ComputedField::Reader MagneticField::Reader::getComputedField() const {
  KJ_IREQUIRE((which() == MagneticField::COMPUTED_FIELD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::ComputedField::Builder MagneticField::Builder::getComputedField() {
  KJ_IREQUIRE((which() == MagneticField::COMPUTED_FIELD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::Builder::setComputedField( ::fsc::ComputedField::Reader value) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::COMPUTED_FIELD);
  ::capnp::_::PointerHelpers< ::fsc::ComputedField>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::ComputedField::Builder MagneticField::Builder::initComputedField() {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::COMPUTED_FIELD);
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::Builder::adoptComputedField(
    ::capnp::Orphan< ::fsc::ComputedField>&& value) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::COMPUTED_FIELD);
  ::capnp::_::PointerHelpers< ::fsc::ComputedField>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::ComputedField> MagneticField::Builder::disownComputedField() {
  KJ_IREQUIRE((which() == MagneticField::COMPUTED_FIELD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::ComputedField>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MagneticField::Reader::isFilamentField() const {
  return which() == MagneticField::FILAMENT_FIELD;
}
inline bool MagneticField::Builder::isFilamentField() {
  return which() == MagneticField::FILAMENT_FIELD;
}
inline typename MagneticField::FilamentField::Reader MagneticField::Reader::getFilamentField() const {
  KJ_IREQUIRE((which() == MagneticField::FILAMENT_FIELD),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::FilamentField::Reader(_reader);
}
inline typename MagneticField::FilamentField::Builder MagneticField::Builder::getFilamentField() {
  KJ_IREQUIRE((which() == MagneticField::FILAMENT_FIELD),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::FilamentField::Builder(_builder);
}
inline typename MagneticField::FilamentField::Builder MagneticField::Builder::initFilamentField() {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::FILAMENT_FIELD);
  _builder.setDataField< ::uint32_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename MagneticField::FilamentField::Builder(_builder);
}
inline bool MagneticField::Reader::isScaleBy() const {
  return which() == MagneticField::SCALE_BY;
}
inline bool MagneticField::Builder::isScaleBy() {
  return which() == MagneticField::SCALE_BY;
}
inline typename MagneticField::ScaleBy::Reader MagneticField::Reader::getScaleBy() const {
  KJ_IREQUIRE((which() == MagneticField::SCALE_BY),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::ScaleBy::Reader(_reader);
}
inline typename MagneticField::ScaleBy::Builder MagneticField::Builder::getScaleBy() {
  KJ_IREQUIRE((which() == MagneticField::SCALE_BY),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::ScaleBy::Builder(_builder);
}
inline typename MagneticField::ScaleBy::Builder MagneticField::Builder::initScaleBy() {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::SCALE_BY);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename MagneticField::ScaleBy::Builder(_builder);
}
inline bool MagneticField::Reader::isInvert() const {
  return which() == MagneticField::INVERT;
}
inline bool MagneticField::Builder::isInvert() {
  return which() == MagneticField::INVERT;
}
inline bool MagneticField::Reader::hasInvert() const {
  if (which() != MagneticField::INVERT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::Builder::hasInvert() {
  if (which() != MagneticField::INVERT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::MagneticField::Reader MagneticField::Reader::getInvert() const {
  KJ_IREQUIRE((which() == MagneticField::INVERT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::MagneticField::Builder MagneticField::Builder::getInvert() {
  KJ_IREQUIRE((which() == MagneticField::INVERT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::Builder::setInvert( ::fsc::MagneticField::Reader value) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::INVERT);
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::MagneticField::Builder MagneticField::Builder::initInvert() {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::INVERT);
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::Builder::adoptInvert(
    ::capnp::Orphan< ::fsc::MagneticField>&& value) {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::INVERT);
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::MagneticField> MagneticField::Builder::disownInvert() {
  KJ_IREQUIRE((which() == MagneticField::INVERT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MagneticField::Reader::isW7xMagneticConfig() const {
  return which() == MagneticField::W7X_MAGNETIC_CONFIG;
}
inline bool MagneticField::Builder::isW7xMagneticConfig() {
  return which() == MagneticField::W7X_MAGNETIC_CONFIG;
}
inline typename MagneticField::W7xMagneticConfig::Reader MagneticField::Reader::getW7xMagneticConfig() const {
  KJ_IREQUIRE((which() == MagneticField::W7X_MAGNETIC_CONFIG),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::W7xMagneticConfig::Reader(_reader);
}
inline typename MagneticField::W7xMagneticConfig::Builder MagneticField::Builder::getW7xMagneticConfig() {
  KJ_IREQUIRE((which() == MagneticField::W7X_MAGNETIC_CONFIG),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::W7xMagneticConfig::Builder(_builder);
}
inline typename MagneticField::W7xMagneticConfig::Builder MagneticField::Builder::initW7xMagneticConfig() {
  _builder.setDataField<MagneticField::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, MagneticField::W7X_MAGNETIC_CONFIG);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS).clear();
  return typename MagneticField::W7xMagneticConfig::Builder(_builder);
}
inline double MagneticField::FilamentField::Reader::getCurrent() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double MagneticField::FilamentField::Builder::getCurrent() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MagneticField::FilamentField::Builder::setCurrent(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool MagneticField::FilamentField::Reader::hasBiotSavartSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::FilamentField::Builder::hasBiotSavartSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::BiotSavartSettings::Reader MagneticField::FilamentField::Reader::getBiotSavartSettings() const {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::BiotSavartSettings::Builder MagneticField::FilamentField::Builder::getBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::BiotSavartSettings::Pipeline MagneticField::FilamentField::Pipeline::getBiotSavartSettings() {
  return  ::fsc::BiotSavartSettings::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MagneticField::FilamentField::Builder::setBiotSavartSettings( ::fsc::BiotSavartSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::BiotSavartSettings::Builder MagneticField::FilamentField::Builder::initBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::FilamentField::Builder::adoptBiotSavartSettings(
    ::capnp::Orphan< ::fsc::BiotSavartSettings>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::BiotSavartSettings> MagneticField::FilamentField::Builder::disownBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MagneticField::FilamentField::Reader::hasFilament() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::FilamentField::Builder::hasFilament() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::Filament::Reader MagneticField::FilamentField::Reader::getFilament() const {
  return ::capnp::_::PointerHelpers< ::fsc::Filament>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::fsc::Filament::Builder MagneticField::FilamentField::Builder::getFilament() {
  return ::capnp::_::PointerHelpers< ::fsc::Filament>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::Filament::Pipeline MagneticField::FilamentField::Pipeline::getFilament() {
  return  ::fsc::Filament::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void MagneticField::FilamentField::Builder::setFilament( ::fsc::Filament::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::Filament>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::fsc::Filament::Builder MagneticField::FilamentField::Builder::initFilament() {
  return ::capnp::_::PointerHelpers< ::fsc::Filament>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void MagneticField::FilamentField::Builder::adoptFilament(
    ::capnp::Orphan< ::fsc::Filament>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::Filament>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::Filament> MagneticField::FilamentField::Builder::disownFilament() {
  return ::capnp::_::PointerHelpers< ::fsc::Filament>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t MagneticField::FilamentField::Reader::getWindingNo() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1u);
}

inline  ::uint32_t MagneticField::FilamentField::Builder::getWindingNo() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1u);
}
inline void MagneticField::FilamentField::Builder::setWindingNo( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool MagneticField::ScaleBy::Reader::hasField() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::ScaleBy::Builder::hasField() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::MagneticField::Reader MagneticField::ScaleBy::Reader::getField() const {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::MagneticField::Builder MagneticField::ScaleBy::Builder::getField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::MagneticField::Pipeline MagneticField::ScaleBy::Pipeline::getField() {
  return  ::fsc::MagneticField::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MagneticField::ScaleBy::Builder::setField( ::fsc::MagneticField::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::MagneticField::Builder MagneticField::ScaleBy::Builder::initField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::ScaleBy::Builder::adoptField(
    ::capnp::Orphan< ::fsc::MagneticField>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::MagneticField>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::MagneticField> MagneticField::ScaleBy::Builder::disownField() {
  return ::capnp::_::PointerHelpers< ::fsc::MagneticField>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double MagneticField::ScaleBy::Reader::getFactor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double MagneticField::ScaleBy::Builder::getFactor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MagneticField::ScaleBy::Builder::setFactor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::fsc::MagneticField::W7xMagneticConfig::Which MagneticField::W7xMagneticConfig::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline  ::fsc::MagneticField::W7xMagneticConfig::Which MagneticField::W7xMagneticConfig::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool MagneticField::W7xMagneticConfig::Reader::isConfigurationDB() const {
  return which() == MagneticField::W7xMagneticConfig::CONFIGURATION_D_B;
}
inline bool MagneticField::W7xMagneticConfig::Builder::isConfigurationDB() {
  return which() == MagneticField::W7xMagneticConfig::CONFIGURATION_D_B;
}
inline typename MagneticField::W7xMagneticConfig::ConfigurationDB::Reader MagneticField::W7xMagneticConfig::Reader::getConfigurationDB() const {
  KJ_IREQUIRE((which() == MagneticField::W7xMagneticConfig::CONFIGURATION_D_B),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::W7xMagneticConfig::ConfigurationDB::Reader(_reader);
}
inline typename MagneticField::W7xMagneticConfig::ConfigurationDB::Builder MagneticField::W7xMagneticConfig::Builder::getConfigurationDB() {
  KJ_IREQUIRE((which() == MagneticField::W7xMagneticConfig::CONFIGURATION_D_B),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::W7xMagneticConfig::ConfigurationDB::Builder(_builder);
}
inline typename MagneticField::W7xMagneticConfig::ConfigurationDB::Builder MagneticField::W7xMagneticConfig::Builder::initConfigurationDB() {
  _builder.setDataField<MagneticField::W7xMagneticConfig::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, MagneticField::W7xMagneticConfig::CONFIGURATION_D_B);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename MagneticField::W7xMagneticConfig::ConfigurationDB::Builder(_builder);
}
inline bool MagneticField::W7xMagneticConfig::Reader::isCoilsAndCurrents() const {
  return which() == MagneticField::W7xMagneticConfig::COILS_AND_CURRENTS;
}
inline bool MagneticField::W7xMagneticConfig::Builder::isCoilsAndCurrents() {
  return which() == MagneticField::W7xMagneticConfig::COILS_AND_CURRENTS;
}
inline typename MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader MagneticField::W7xMagneticConfig::Reader::getCoilsAndCurrents() const {
  KJ_IREQUIRE((which() == MagneticField::W7xMagneticConfig::COILS_AND_CURRENTS),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader(_reader);
}
inline typename MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder MagneticField::W7xMagneticConfig::Builder::getCoilsAndCurrents() {
  KJ_IREQUIRE((which() == MagneticField::W7xMagneticConfig::COILS_AND_CURRENTS),
              "Must check which() before get()ing a union member.");
  return typename MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder(_builder);
}
inline typename MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder MagneticField::W7xMagneticConfig::Builder::initCoilsAndCurrents() {
  _builder.setDataField<MagneticField::W7xMagneticConfig::Which>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, MagneticField::W7xMagneticConfig::COILS_AND_CURRENTS);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<3>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<4>() * ::capnp::POINTERS).clear();
  return typename MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder(_builder);
}
inline bool MagneticField::W7xMagneticConfig::ConfigurationDB::Reader::hasBiotSavartSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::hasBiotSavartSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::BiotSavartSettings::Reader MagneticField::W7xMagneticConfig::ConfigurationDB::Reader::getBiotSavartSettings() const {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::fsc::BiotSavartSettings::Builder MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::getBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::BiotSavartSettings::Pipeline MagneticField::W7xMagneticConfig::ConfigurationDB::Pipeline::getBiotSavartSettings() {
  return  ::fsc::BiotSavartSettings::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::setBiotSavartSettings( ::fsc::BiotSavartSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::fsc::BiotSavartSettings::Builder MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::initBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::adoptBiotSavartSettings(
    ::capnp::Orphan< ::fsc::BiotSavartSettings>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::BiotSavartSettings> MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::disownBiotSavartSettings() {
  return ::capnp::_::PointerHelpers< ::fsc::BiotSavartSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t MagneticField::W7xMagneticConfig::ConfigurationDB::Reader::getConfigID() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::getConfigID() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void MagneticField::W7xMagneticConfig::ConfigurationDB::Builder::setConfigID( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::hasNonplanar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::hasNonplanar() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::getNonplanar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 69);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::getNonplanar() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 69);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setNonplanar( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setNonplanar(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::initNonplanar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::adoptNonplanar(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::disownNonplanar() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::hasPlanar() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::hasPlanar() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::getPlanar() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 86);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::getPlanar() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 86);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setPlanar( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setPlanar(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::initPlanar(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::adoptPlanar(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::disownPlanar() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::hasTrim() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::hasTrim() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::getTrim() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 100);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::getTrim() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 100);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setTrim( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setTrim(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::initTrim(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::adoptTrim(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::disownTrim() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::hasControl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::hasControl() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::getControl() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 117);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::getControl() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_afea79d6357d63a7 + 117);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setControl( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setControl(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::initControl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::adoptControl(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::disownControl() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::hasCoils() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::hasCoils() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::fsc::W7XCoilSet::Reader MagneticField::W7xMagneticConfig::CoilsAndCurrents::Reader::getCoils() const {
  return ::capnp::_::PointerHelpers< ::fsc::W7XCoilSet>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::fsc::W7XCoilSet::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::getCoils() {
  return ::capnp::_::PointerHelpers< ::fsc::W7XCoilSet>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::fsc::W7XCoilSet::Pipeline MagneticField::W7xMagneticConfig::CoilsAndCurrents::Pipeline::getCoils() {
  return  ::fsc::W7XCoilSet::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::setCoils( ::fsc::W7XCoilSet::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::W7XCoilSet>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::fsc::W7XCoilSet::Builder MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::initCoils() {
  return ::capnp::_::PointerHelpers< ::fsc::W7XCoilSet>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::adoptCoils(
    ::capnp::Orphan< ::fsc::W7XCoilSet>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::W7XCoilSet>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::fsc::W7XCoilSet> MagneticField::W7xMagneticConfig::CoilsAndCurrents::Builder::disownCoils() {
  return ::capnp::_::PointerHelpers< ::fsc::W7XCoilSet>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

}  // namespace

CAPNP_END_HEADER

