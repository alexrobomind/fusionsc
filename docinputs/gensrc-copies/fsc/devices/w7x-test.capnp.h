// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: w7x-test.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../geometry.capnp.h"
#include "../http.capnp.h"
#include "../magnetics.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(dabcb1ac5bf3b97c);
CAPNP_DECLARE_SCHEMA(be189a826c7a15c0);
CAPNP_DECLARE_SCHEMA(87245b9e1a2980d1);
CAPNP_DECLARE_SCHEMA(efccdafe58a1e4e5);

}  // namespace schemas
}  // namespace capnp

namespace fsc {
namespace devices {
namespace w7x {

template <typename T = ::capnp::AnyPointer>
struct DBTest {
  DBTest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dabcb1ac5bf3b97c, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

template <typename T>
struct DBTest<T>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    RESULT,
    NOT_FOUND,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be189a826c7a15c0, 2, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

extern const ::capnp::_::ConstStruct< ::fsc::devices::w7x::DBTest< ::fsc::Filament>> CDB_TEST;
extern const ::capnp::_::ConstStruct< ::fsc::devices::w7x::DBTest< ::fsc::Mesh>> COMPDB_TEST;
// =======================================================================================

template <typename T>
class DBTest<T>::Reader {
public:
  typedef DBTest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename DBTest<T2>::Reader asGeneric() {
    return typename DBTest<T2>::Reader(_reader);
  }

  inline bool hasHttpRoot() const;
  inline  ::fsc::HttpRoot::Reader getHttpRoot() const;

  inline bool hasEntries() const;
  inline typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class DBTest<T>::Builder {
public:
  typedef DBTest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename DBTest<T2>::Builder asGeneric() {
    return typename DBTest<T2>::Builder(_builder);
  }

  inline bool hasHttpRoot();
  inline  ::fsc::HttpRoot::Builder getHttpRoot();
  inline void setHttpRoot( ::fsc::HttpRoot::Reader value);
  inline  ::fsc::HttpRoot::Builder initHttpRoot();
  inline void adoptHttpRoot(::capnp::Orphan< ::fsc::HttpRoot>&& value);
  inline ::capnp::Orphan< ::fsc::HttpRoot> disownHttpRoot();

  inline bool hasEntries();
  inline typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Builder getEntries();
  inline void setEntries(typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Reader value);
  inline typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class DBTest<T>::Pipeline {
public:
  typedef DBTest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::fsc::HttpRoot::Pipeline getHttpRoot();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename T>
class DBTest<T>::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename DBTest<T2>::Entry::Reader asDBTestGeneric() {
    return typename DBTest<T2>::Entry::Reader(_reader);
  }

  inline Which which() const;
  inline  ::uint64_t getId() const;

  inline bool isResult() const;
  inline bool hasResult() const;
  inline  ::capnp::ReaderFor<T> getResult() const;

  inline bool isNotFound() const;
  inline  ::capnp::Void getNotFound() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class DBTest<T>::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename DBTest<T2>::Entry::Builder asDBTestGeneric() {
    return typename DBTest<T2>::Entry::Builder(_builder);
  }

  inline Which which();
  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool isResult();
  inline bool hasResult();
  inline  ::capnp::BuilderFor<T> getResult();
  inline void setResult( ::capnp::ReaderFor<T> value);
  inline  ::capnp::BuilderFor<T> initResult();
  inline  ::capnp::BuilderFor<T> initResult(unsigned int size);
  inline void adoptResult(::capnp::Orphan<T>&& value);
  inline ::capnp::Orphan<T> disownResult();

  inline bool isNotFound();
  inline  ::capnp::Void getNotFound();
  inline void setNotFound( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class DBTest<T>::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename T>
inline bool DBTest<T>::Reader::hasHttpRoot() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool DBTest<T>::Builder::hasHttpRoot() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline  ::fsc::HttpRoot::Reader DBTest<T>::Reader::getHttpRoot() const {
  return ::capnp::_::PointerHelpers< ::fsc::HttpRoot>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline  ::fsc::HttpRoot::Builder DBTest<T>::Builder::getHttpRoot() {
  return ::capnp::_::PointerHelpers< ::fsc::HttpRoot>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename T>
inline  ::fsc::HttpRoot::Pipeline DBTest<T>::Pipeline::getHttpRoot() {
  return  ::fsc::HttpRoot::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename T>
inline void DBTest<T>::Builder::setHttpRoot( ::fsc::HttpRoot::Reader value) {
  ::capnp::_::PointerHelpers< ::fsc::HttpRoot>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename T>
inline  ::fsc::HttpRoot::Builder DBTest<T>::Builder::initHttpRoot() {
  return ::capnp::_::PointerHelpers< ::fsc::HttpRoot>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline void DBTest<T>::Builder::adoptHttpRoot(
    ::capnp::Orphan< ::fsc::HttpRoot>&& value) {
  ::capnp::_::PointerHelpers< ::fsc::HttpRoot>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan< ::fsc::HttpRoot> DBTest<T>::Builder::disownHttpRoot() {
  return ::capnp::_::PointerHelpers< ::fsc::HttpRoot>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename T>
inline bool DBTest<T>::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool DBTest<T>::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Reader DBTest<T>::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Builder DBTest<T>::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename T>
inline void DBTest<T>::Builder::setEntries(typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
template <typename T>
inline typename  ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>::Builder DBTest<T>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
template <typename T>
inline void DBTest<T>::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>> DBTest<T>::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::fsc::devices::w7x::DBTest<T>::Entry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

template <typename T>
inline typename  ::fsc::devices::w7x::DBTest<T>::Entry::Which DBTest<T>::Entry::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
template <typename T>
inline typename  ::fsc::devices::w7x::DBTest<T>::Entry::Which DBTest<T>::Entry::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

template <typename T>
inline  ::uint64_t DBTest<T>::Entry::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

template <typename T>
inline  ::uint64_t DBTest<T>::Entry::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
template <typename T>
inline void DBTest<T>::Entry::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

template <typename T>
inline bool DBTest<T>::Entry::Reader::isResult() const {
  return which() == DBTest<T>::Entry::RESULT;
}
template <typename T>
inline bool DBTest<T>::Entry::Builder::isResult() {
  return which() == DBTest<T>::Entry::RESULT;
}
template <typename T>
inline bool DBTest<T>::Entry::Reader::hasResult() const {
  if (which() != DBTest<T>::Entry::RESULT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool DBTest<T>::Entry::Builder::hasResult() {
  if (which() != DBTest<T>::Entry::RESULT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline  ::capnp::ReaderFor<T> DBTest<T>::Entry::Reader::getResult() const {
  KJ_IREQUIRE((which() == DBTest<T>::Entry::RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<T>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> DBTest<T>::Entry::Builder::getResult() {
  KJ_IREQUIRE((which() == DBTest<T>::Entry::RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<T>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline void DBTest<T>::Entry::Builder::setResult( ::capnp::ReaderFor<T> value) {
  _builder.setDataField<DBTest<T>::Entry::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DBTest<T>::Entry::RESULT);
  ::capnp::_::PointerHelpers<T>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename T>
inline  ::capnp::BuilderFor<T> DBTest<T>::Entry::Builder::initResult() {
  _builder.setDataField<DBTest<T>::Entry::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DBTest<T>::Entry::RESULT);
  return ::capnp::_::PointerHelpers<T>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline  ::capnp::BuilderFor<T> DBTest<T>::Entry::Builder::initResult(unsigned int size) {
  _builder.setDataField<DBTest<T>::Entry::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DBTest<T>::Entry::RESULT);
  return ::capnp::_::PointerHelpers<T>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename T>
inline void DBTest<T>::Entry::Builder::adoptResult(
    ::capnp::Orphan<T>&& value) {
  _builder.setDataField<DBTest<T>::Entry::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DBTest<T>::Entry::RESULT);
  ::capnp::_::PointerHelpers<T>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan<T> DBTest<T>::Entry::Builder::disownResult() {
  KJ_IREQUIRE((which() == DBTest<T>::Entry::RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers<T>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename T>
inline bool DBTest<T>::Entry::Reader::isNotFound() const {
  return which() == DBTest<T>::Entry::NOT_FOUND;
}
template <typename T>
inline bool DBTest<T>::Entry::Builder::isNotFound() {
  return which() == DBTest<T>::Entry::NOT_FOUND;
}
template <typename T>
inline  ::capnp::Void DBTest<T>::Entry::Reader::getNotFound() const {
  KJ_IREQUIRE((which() == DBTest<T>::Entry::NOT_FOUND),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

template <typename T>
inline  ::capnp::Void DBTest<T>::Entry::Builder::getNotFound() {
  KJ_IREQUIRE((which() == DBTest<T>::Entry::NOT_FOUND),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
template <typename T>
inline void DBTest<T>::Entry::Builder::setNotFound( ::capnp::Void value) {
  _builder.setDataField<DBTest<T>::Entry::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, DBTest<T>::Entry::NOT_FOUND);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

// DBTest<T>::Entry
template <typename T>
constexpr uint16_t DBTest<T>::Entry::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t DBTest<T>::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind DBTest<T>::Entry::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* DBTest<T>::Entry::_capnpPrivate::schema;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope DBTest<T>::Entry::_capnpPrivate::brandScopes[] = {
  { 0xdabcb1ac5bf3b97c, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding DBTest<T>::Entry::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema DBTest<T>::Entry::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_be189a826c7a15c0, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

// DBTest<T>
template <typename T>
constexpr uint16_t DBTest<T>::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t DBTest<T>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind DBTest<T>::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* DBTest<T>::_capnpPrivate::schema;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope DBTest<T>::_capnpPrivate::brandScopes[] = {
  { 0xdabcb1ac5bf3b97c, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding DBTest<T>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency DBTest<T>::_capnpPrivate::brandDependencies[] = {
  { 16777217,  ::fsc::devices::w7x::DBTest<T>::Entry::_capnpPrivate::brand() },
};
template <typename T>
const ::capnp::_::RawBrandedSchema DBTest<T>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_dabcb1ac5bf3b97c, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

