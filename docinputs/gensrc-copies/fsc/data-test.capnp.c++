// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: data-test.capnp

#include "data-test.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<33> b_a9c4d5c3c8a32747 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71,  39, 163, 200, 195, 213, 196, 169,
     16,   0,   0,   0,   1,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     68,  97, 116,  97,  72, 111, 108, 100,
    101, 114,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9c4d5c3c8a32747 = b_a9c4d5c3c8a32747.words;
#if !CAPNP_LITE
static const uint16_t m_a9c4d5c3c8a32747[] = {0};
static const uint16_t i_a9c4d5c3c8a32747[] = {0};
const ::capnp::_::RawSchema s_a9c4d5c3c8a32747 = {
  0xa9c4d5c3c8a32747, b_a9c4d5c3c8a32747.words, 33, nullptr, m_a9c4d5c3c8a32747,
  0, 1, i_a9c4d5c3c8a32747, nullptr, nullptr, { &s_a9c4d5c3c8a32747, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_dbb3816b5ef1601e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30,  96, 241,  94, 107, 129, 179, 219,
     16,   0,   0,   0,   1,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  15,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     68,  97, 116,  97,  82, 101, 102,  72,
    111, 108, 100, 101, 114,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 102,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
      8,  32,   3,  88, 119, 138,  91, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     30,  96, 241,  94, 107, 129, 179, 219,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  18,   0,   0,   0,
     84,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbb3816b5ef1601e = b_dbb3816b5ef1601e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dbb3816b5ef1601e[] = {
  &s_c85b8a7758032008,
};
static const uint16_t m_dbb3816b5ef1601e[] = {0};
static const uint16_t i_dbb3816b5ef1601e[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_dbb3816b5ef1601e[] = {
  { 16777216,  ::fsc::DataRef< ::capnp::AnyPointer>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_dbb3816b5ef1601e = {
  0xdbb3816b5ef1601e, b_dbb3816b5ef1601e.words, 48, d_dbb3816b5ef1601e, m_dbb3816b5ef1601e,
  1, 1, i_dbb3816b5ef1601e, nullptr, nullptr, { &s_dbb3816b5ef1601e, nullptr, bd_dbb3816b5ef1601e, 0, sizeof(bd_dbb3816b5ef1601e) / sizeof(bd_dbb3816b5ef1601e[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_e8adfd51b47716b7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    183,  22, 119, 180,  81, 253, 173, 232,
     16,   0,   0,   0,   3,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     65,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e8adfd51b47716b7 = b_e8adfd51b47716b7.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e8adfd51b47716b7 = {
  0xe8adfd51b47716b7, b_e8adfd51b47716b7.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e8adfd51b47716b7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_e57a24fca8d0a916 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 169, 208, 168, 252,  36, 122, 229,
     16,   0,   0,   0,   3,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
     25,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     66,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    183,  22, 119, 180,  81, 253, 173, 232,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e57a24fca8d0a916 = b_e57a24fca8d0a916.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e57a24fca8d0a916[] = {
  &s_e8adfd51b47716b7,
};
const ::capnp::_::RawSchema s_e57a24fca8d0a916 = {
  0xe57a24fca8d0a916, b_e57a24fca8d0a916.words, 20, d_e57a24fca8d0a916, nullptr,
  1, 0, nullptr, nullptr, nullptr, { &s_e57a24fca8d0a916, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<73> b_ba8c4a97a231c4f7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
     16,   0,   0,   0,   1,   0,   4,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     84, 101, 115, 116,  83, 116, 114, 117,
     99, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    176, 253, 143, 241, 214, 185, 212, 133,
    133,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    201,  81,  51, 234,  83,  70, 120, 253,
    109,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     82, 102,  65, 236, 197, 107, 157, 255,
     85,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 111, 105, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 111, 108,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 115,   0,   0,   0,   0,
    117, 105, 110, 116, 115,   0,   0,   0,
    112, 111, 105, 110, 116, 101, 114, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba8c4a97a231c4f7 = b_ba8c4a97a231c4f7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ba8c4a97a231c4f7[] = {
  &s_85d4b9d6f18ffdb0,
  &s_fd784653ea3351c9,
  &s_ff9d6bc5ec416652,
};
static const uint16_t m_ba8c4a97a231c4f7[] = {1, 2, 4, 3, 0};
static const uint16_t i_ba8c4a97a231c4f7[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_ba8c4a97a231c4f7 = {
  0xba8c4a97a231c4f7, b_ba8c4a97a231c4f7.words, 73, d_ba8c4a97a231c4f7, m_ba8c4a97a231c4f7,
  3, 5, i_ba8c4a97a231c4f7, nullptr, nullptr, { &s_ba8c4a97a231c4f7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_85d4b9d6f18ffdb0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    176, 253, 143, 241, 214, 185, 212, 133,
     27,   0,   0,   0,   1,   0,   4,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      2,   0,   7,   0,   1,   0,   4,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     84, 101, 115, 116,  83, 116, 114, 117,
     99, 116,  46, 105, 110, 116, 115,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 116,  56,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  49,  54,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  51,  50,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  54,  52,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_85d4b9d6f18ffdb0 = b_85d4b9d6f18ffdb0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_85d4b9d6f18ffdb0[] = {
  &s_ba8c4a97a231c4f7,
};
static const uint16_t m_85d4b9d6f18ffdb0[] = {1, 2, 3, 0};
static const uint16_t i_85d4b9d6f18ffdb0[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_85d4b9d6f18ffdb0 = {
  0x85d4b9d6f18ffdb0, b_85d4b9d6f18ffdb0.words, 77, d_85d4b9d6f18ffdb0, m_85d4b9d6f18ffdb0,
  1, 4, i_85d4b9d6f18ffdb0, nullptr, nullptr, { &s_85d4b9d6f18ffdb0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<78> b_fd784653ea3351c9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201,  81,  51, 234,  83,  70, 120, 253,
     27,   0,   0,   0,   1,   0,   4,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      2,   0,   7,   0,   1,   0,   4,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     84, 101, 115, 116,  83, 116, 114, 117,
     99, 116,  46, 117, 105, 110, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,  16,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   8,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   5,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   3,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    117, 105, 110, 116,  56,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  49,  54,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  51,  50,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  54,  52,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd784653ea3351c9 = b_fd784653ea3351c9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fd784653ea3351c9[] = {
  &s_ba8c4a97a231c4f7,
};
static const uint16_t m_fd784653ea3351c9[] = {1, 2, 3, 0};
static const uint16_t i_fd784653ea3351c9[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_fd784653ea3351c9 = {
  0xfd784653ea3351c9, b_fd784653ea3351c9.words, 78, d_fd784653ea3351c9, m_fd784653ea3351c9,
  1, 4, i_fd784653ea3351c9, nullptr, nullptr, { &s_fd784653ea3351c9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_ff9d6bc5ec416652 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     82, 102,  65, 236, 197, 107, 157, 255,
     27,   0,   0,   0,   1,   0,   4,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      2,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
     84, 101, 115, 116,  83, 116, 114, 117,
     99, 116,  46, 112, 111, 105, 110, 116,
    101, 114, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 120, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff9d6bc5ec416652 = b_ff9d6bc5ec416652.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff9d6bc5ec416652[] = {
  &s_ba8c4a97a231c4f7,
};
static const uint16_t m_ff9d6bc5ec416652[] = {0, 1};
static const uint16_t i_ff9d6bc5ec416652[] = {0, 1};
const ::capnp::_::RawSchema s_ff9d6bc5ec416652 = {
  0xff9d6bc5ec416652, b_ff9d6bc5ec416652.words, 48, d_ff9d6bc5ec416652, m_ff9d6bc5ec416652,
  1, 2, i_ff9d6bc5ec416652, nullptr, nullptr, { &s_ff9d6bc5ec416652, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_cc3499fdb77885f1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    241, 133, 120, 183, 253, 153,  52, 204,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  48,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cc3499fdb77885f1 = b_cc3499fdb77885f1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cc3499fdb77885f1 = {
  0xcc3499fdb77885f1, b_cc3499fdb77885f1.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cc3499fdb77885f1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_d90da0c93d4ca462 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 164,  76,  61, 201, 160,  13, 217,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  49,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d90da0c93d4ca462 = b_d90da0c93d4ca462.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d90da0c93d4ca462 = {
  0xd90da0c93d4ca462, b_d90da0c93d4ca462.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d90da0c93d4ca462, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_b9aa5d29920515c9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201,  21,   5, 146,  41,  93, 170, 185,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  50,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   1,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9aa5d29920515c9 = b_b9aa5d29920515c9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b9aa5d29920515c9 = {
  0xb9aa5d29920515c9, b_b9aa5d29920515c9.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b9aa5d29920515c9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_d0c1be6fb97e82da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218, 130, 126, 185, 111, 190, 193, 208,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  51,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d0c1be6fb97e82da = b_d0c1be6fb97e82da.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d0c1be6fb97e82da = {
  0xd0c1be6fb97e82da, b_d0c1be6fb97e82da.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d0c1be6fb97e82da, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_eebbf200a9df3b61 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     97,  59, 223, 169,   0, 242, 187, 238,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  52,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   2,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eebbf200a9df3b61 = b_eebbf200a9df3b61.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_eebbf200a9df3b61 = {
  0xeebbf200a9df3b61, b_eebbf200a9df3b61.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_eebbf200a9df3b61, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_ecff86942830eedf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    223, 238,  48,  40, 148, 134, 255, 236,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  53,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ecff86942830eedf = b_ecff86942830eedf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ecff86942830eedf = {
  0xecff86942830eedf, b_ecff86942830eedf.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ecff86942830eedf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_95db87859feed3fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250, 211, 238, 159, 133, 135, 219, 149,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  54,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_95db87859feed3fa = b_95db87859feed3fa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_95db87859feed3fa = {
  0x95db87859feed3fa, b_95db87859feed3fa.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_95db87859feed3fa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_9ed4686bdccec6d8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    216, 198, 206, 220, 107, 104, 212, 158,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  55,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9ed4686bdccec6d8 = b_9ed4686bdccec6d8.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9ed4686bdccec6d8 = {
  0x9ed4686bdccec6d8, b_9ed4686bdccec6d8.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9ed4686bdccec6d8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_f1ea3529b395368e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    142,  54, 149, 179,  41,  53, 234, 241,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  56,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   2,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f1ea3529b395368e = b_f1ea3529b395368e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f1ea3529b395368e = {
  0xf1ea3529b395368e, b_f1ea3529b395368e.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f1ea3529b395368e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_d5099ff4a7a13c8b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    139,  60, 161, 167, 244, 159,   9, 213,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  57,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d5099ff4a7a13c8b = b_d5099ff4a7a13c8b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d5099ff4a7a13c8b = {
  0xd5099ff4a7a13c8b, b_d5099ff4a7a13c8b.words, 29, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d5099ff4a7a13c8b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_87c0ee696db386de = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222, 134, 179, 109, 105, 238, 192, 135,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  49,  48,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    159,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_87c0ee696db386de = b_87c0ee696db386de.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_87c0ee696db386de = {
  0x87c0ee696db386de, b_87c0ee696db386de.words, 30, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_87c0ee696db386de, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_ac4ac0658b03b552 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     82, 181,   3, 139, 101, 192,  74, 172,
     16,   0,   0,   0,   4,   0,   0,   0,
    115,  86, 215, 227, 230, 102, 102, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  45, 116, 101, 115,
    116,  46,  99,  97, 112, 110, 112,  58,
    116, 101, 115, 116,  49,  49,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    247, 196,  49, 162, 151,  74, 140, 186,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   4,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  26,   0,   0,   0,
     72, 105,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac4ac0658b03b552 = b_ac4ac0658b03b552.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ac4ac0658b03b552 = {
  0xac4ac0658b03b552, b_ac4ac0658b03b552.words, 30, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ac4ac0658b03b552, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace fsc {
namespace test {

// DataHolder
constexpr uint16_t DataHolder::_capnpPrivate::dataWordSize;
constexpr uint16_t DataHolder::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind DataHolder::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DataHolder::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Capability::Server::DispatchCallResult A::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe8adfd51b47716b7ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("data-test.capnp:A", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult A::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "data-test.capnp:A",
          0xe8adfd51b47716b7ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// A
#if !CAPNP_LITE
constexpr ::capnp::Kind A::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* A::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Capability::Server::DispatchCallResult B::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe57a24fca8d0a916ull:
      return dispatchCallInternal(methodId, context);
    case 0xe8adfd51b47716b7ull:
      return  ::fsc::test::A::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("data-test.capnp:B", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult B::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "data-test.capnp:B",
          0xe57a24fca8d0a916ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// B
#if !CAPNP_LITE
constexpr ::capnp::Kind B::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* B::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestStruct
constexpr uint16_t TestStruct::_capnpPrivate::dataWordSize;
constexpr uint16_t TestStruct::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestStruct::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestStruct::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestStruct::Ints
constexpr uint16_t TestStruct::Ints::_capnpPrivate::dataWordSize;
constexpr uint16_t TestStruct::Ints::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestStruct::Ints::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestStruct::Ints::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestStruct::Uints
constexpr uint16_t TestStruct::Uints::_capnpPrivate::dataWordSize;
constexpr uint16_t TestStruct::Uints::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestStruct::Uints::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestStruct::Uints::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestStruct::Pointers
constexpr uint16_t TestStruct::Pointers::_capnpPrivate::dataWordSize;
constexpr uint16_t TestStruct::Pointers::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestStruct::Pointers::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestStruct::Pointers::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST0(::capnp::schemas::b_cc3499fdb77885f1.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST1(::capnp::schemas::b_d90da0c93d4ca462.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST2(::capnp::schemas::b_b9aa5d29920515c9.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST3(::capnp::schemas::b_d0c1be6fb97e82da.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST4(::capnp::schemas::b_eebbf200a9df3b61.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST5(::capnp::schemas::b_ecff86942830eedf.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST6(::capnp::schemas::b_95db87859feed3fa.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST7(::capnp::schemas::b_9ed4686bdccec6d8.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST8(::capnp::schemas::b_f1ea3529b395368e.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST9(::capnp::schemas::b_d5099ff4a7a13c8b.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST10(::capnp::schemas::b_87c0ee696db386de.words + 22);
const ::capnp::_::ConstStruct< ::fsc::test::TestStruct> TEST11(::capnp::schemas::b_ac4ac0658b03b552.words + 22);

}  // namespace
}  // namespace

